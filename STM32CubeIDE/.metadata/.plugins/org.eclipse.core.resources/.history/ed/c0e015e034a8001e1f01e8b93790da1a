#include "uart.h"
#include "stm32f4xx.h"
#include <stdio.h> //For re targeting printf, to be able to use printf without UART
#include <stdint.h>

#define GPIOAEN       (1U<<0)
#define UART2EN       (1U<<17)

#define SYS_FREQ      16000000 //Default peripheral clock is 16Mz for stm32f411
#define APB1_CLK      SYS_FREQ //Peripheral clock APB1 (low-speed)
#define UART_BAUDRATE 115200   //Standard  baud rate,desired baud rate

#define CR1_TE        (1U<<3)  //Control reg to set UART as a Transmitter(direction)
#define CR1_UE        (1U<<13) //Control reg to set UART enable, UE(UART enable)

#define SR_TXE        (1U<<7)

static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate);
static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate);
static void uart_write(int ch);


int __io__putchar (int ch) //For re targeting printf, this will allow to use printf
{
	uart_write(ch);
	return ch;

}
void uart_tx_init(void)  //UART transmit data function
{
/*GPIO configuration for UART */
	/*Enable clock access to GPIO(PA2)*/
	/*Alternate function(TX)pin is connected to PA2,which is GPIO PA*/
	RCC->AHB1ENR |= GPIOAEN;

	/*Set PA2 mode to alternate function Mode*/
	GPIOA->MODER &=~(1U<<4);
	GPIOA->MODER |=(1U<<5);

	/*Set alternate function TYPE to AF07(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
	GPIOA->AFR[0] |=(1U<<9);
	GPIOA->AFR[0] |=(1U<<10);
	GPIOA->AFR[0] &=~(1U<<11);

/*Configure UART module itself*/
    /*Enable clock access to USART2*/
	RCC->APB1ENR |= UART2EN;

/*Configure baud rate*/
	uart_set_baudrate(APB1_CLK,UART_BAUDRATE);

/*Configure transfer direction to TX,in CR1 enable TE(Transmitter Enable)*/
    USART2-> CR1 =  CR1_TE; //Setting everything to 0 except TE bit

/*Enable UART module*/
    USART2-> CR1 |= CR1_UE;
}



//To transmit data, to transmit a single character of 8 bit
static void uart_write(int ch)
{
    /*Making sure that the transmit data register is empty*/
	//Make sure SR is empty and then set TXE 1 to SR
	while(!(USART2-> SR & SR_TXE)){}//Loop continues to execute as long as the TXE bit is not set

	/*Writing to transmit data register*/
	USART2->DR = (ch & 0xFF);/*0xFF, the bit mask ensures that only the least significant 8 bits of ch are considered.
	                          To ensure that only the ASCII character (8 bits) is transmitted.*/
	}
//Write baud rate to UART BRR reg, to set UART baud rate
static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
	USART2->BRR= compute_uart_bd(periph_clk,baudrate);
	}
//To configure the baud rate
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
	return (periph_clk +(baudrate /2U))/baudrate;
	}
