/*Function to allow SysTick timer to operate in Interrupt mode and
 * to generate a delay in every seconds */
#include "timebase.h"
#include "stm32f4xx.h"

#define ONE_SEC_LOAD      16000000

#define CTRL_ENABLE       (1U<<0)
#define CTRL_TICKINT      (1U<<1)
#define CTRL_CLKSRC       (1U<<2)
#define CTRL_COUNTFLAG    (1U<<16)

#define MAX_DELAY         0xFFFFFFFFU

volatile uint32_t g_curr_tick;
volatile uint32_t g_curr_tick_p;
volatile uint32_t tick_freq =1;

/*Delay in seconds*/
void delay(uint32_t delay)
{
	uint32_t tickstart = get_tick();
	uint32_t wait =delay;
	if (wait <MAX_DELAY)
	{
		wait+= (uint32_t)(tick_freq);
	}

	while((get_tick()-tickstart)<wait)
	{

	}
}


uint32_t get_tick(void)
{
	__disable_irq();
	g_curr_tick_p=g_curr_tick;
	__enable_irq();
	return g_curr_tick_p;
}

void timebase_init(void) //To initialize SysTick timer to operate in interrupt mode and to generate a delay
{
	/*SysTick RVR(Reload value reg is in header file as LOAD*/
	/*Reload the timer with number of cycles per second */
	SysTick->LOAD = ONE_SEC_LOAD -1; //It always count +1 from 0

	/*Clear systic current valur register(CVR) in header it is VAL */
	SysTick->VAL= 0; //A write of any value clears the field to 0, and also clears the SYST_CSR COUNTFLAG bit to 0

	/*Select internal clock source*/
	SysTick-> CTRL = CTRL_CLKSRC;

	/*Enable interrupt */
	SysTick-> CTRL |= CTRL_TICKINT;

	/*Enable systick*/
	SysTick-> CTRL |= CTRL_ENABLE;

	/*Enable global interrupt*/
	__enable_irq();//Intrinsic function comes with header file

}

void SysTick_Handler(void)
{
	tick_increment();
}
void tick_increment(void)// IRQ Handler function
{
	g_curr_tick += tick_freq;

}
