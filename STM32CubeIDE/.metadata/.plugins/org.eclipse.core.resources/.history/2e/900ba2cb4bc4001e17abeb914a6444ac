#include "led.h"
#include "uart.h"
#include "timebase.h"
#include "osKernel.h"

#define QUANTA   10
typedef uint32_t TaskProfiler;

TaskProfiler Task0_Profiler,Task1_Profiler,Task2_Profiler;
void motor_run(void);
void motor_stop(void);
void valve_open(void);
void valve_close(void);


void task0(void)
{
	while(1)
{
		Task0_Profiler++;
}

}

void task1(void)
{
	while(1)
{
		Task1_Profiler++;
}

}

void task2(void)
{
	while(1)
{
		Task2_Profiler++;
}

}
int main(void)
{
	//Kernel Initialization
	osKernelInit();
	//Adding Threads
	osKernelAddThreads(&task0,&task1,&task2);
	//Set RR time quanta
	osKernelLaunch(QUANTA);




}


void motor_run(void)
{
	printf("Motor is starting \n\r");
}

void motor_stop(void)
{
	printf("Motor is stopping \n\r");
}

void valve_open(void)
{
	printf("Valve is opening \n\r");
}

void valve_close(void)
{
	printf("Valve is closing \n\r");
}




/*For manual context switching

 int motor_main(void)
{
	while(1)
	{
	    motor_run();
        delay(1);
	    motor_stop();
		delay(1);
	}

}

int valve_main(void)
{
	while(1)
	{
		valve_open();
		delay(1);
		valve_close();
		delay(1);
	}

}
int main (void)
{
  uint32_t volatile start =0U;

  led_init();
  uart_tx_init();
  timebase_init();

  if(start)
  {
	  motor_main();

  }
  else
  {
	  valve_main();

  }

  while (1)
  {


  }

}
 */
 */
