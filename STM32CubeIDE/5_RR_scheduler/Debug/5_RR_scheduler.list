
5_RR_scheduler.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000015b0  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000008c  08001750  08001750  00011750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080017dc  080017dc  0002005c  2**0
                  CONTENTS
  4 .ARM          00000000  080017dc  080017dc  0002005c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080017dc  080017dc  0002005c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080017dc  080017dc  000117dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080017e0  080017e0  000117e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000005c  20000000  080017e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000648  2000005c  08001840  0002005c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200006a4  08001840  000206a4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002005c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008c  2**0
                  CONTENTS, READONLY
 13 .debug_info   00001550  00000000  00000000  000200cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00000720  00000000  00000000  0002161f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000001d8  00000000  00000000  00021d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000146  00000000  00000000  00021f18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000020fe  00000000  00000000  0002205e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000256a  00000000  00000000  0002415c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00055fbe  00000000  00000000  000266c6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00000d5c  00000000  00000000  0007c684  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008e  00000000  00000000  0007d3e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000005c 	.word	0x2000005c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08001738 	.word	0x08001738

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000060 	.word	0x20000060
 80001dc:	08001738 	.word	0x08001738

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <task0>:
void valve_open(void);
void valve_close(void);


void task0(void)
{
 8000280:	b580      	push	{r7, lr}
 8000282:	af00      	add	r7, sp, #0
	while(1)
{
		Task0_Profiler++;
 8000284:	4b03      	ldr	r3, [pc, #12]	; (8000294 <task0+0x14>)
 8000286:	681b      	ldr	r3, [r3, #0]
 8000288:	3301      	adds	r3, #1
 800028a:	4a02      	ldr	r2, [pc, #8]	; (8000294 <task0+0x14>)
 800028c:	6013      	str	r3, [r2, #0]
		motor_run();
 800028e:	f000 f831 	bl	80002f4 <motor_run>
		Task0_Profiler++;
 8000292:	e7f7      	b.n	8000284 <task0+0x4>
 8000294:	20000078 	.word	0x20000078

08000298 <task1>:
}

}

void task1(void)
{
 8000298:	b580      	push	{r7, lr}
 800029a:	af00      	add	r7, sp, #0
	while(1)
{
		Task1_Profiler++;
 800029c:	4b03      	ldr	r3, [pc, #12]	; (80002ac <task1+0x14>)
 800029e:	681b      	ldr	r3, [r3, #0]
 80002a0:	3301      	adds	r3, #1
 80002a2:	4a02      	ldr	r2, [pc, #8]	; (80002ac <task1+0x14>)
 80002a4:	6013      	str	r3, [r2, #0]
		valve_open();
 80002a6:	f000 f82f 	bl	8000308 <valve_open>
		Task1_Profiler++;
 80002aa:	e7f7      	b.n	800029c <task1+0x4>
 80002ac:	2000007c 	.word	0x2000007c

080002b0 <task2>:
}

}

void task2(void)
{
 80002b0:	b480      	push	{r7}
 80002b2:	af00      	add	r7, sp, #0
	while(1)
{
		Task2_Profiler++;
 80002b4:	4b02      	ldr	r3, [pc, #8]	; (80002c0 <task2+0x10>)
 80002b6:	681b      	ldr	r3, [r3, #0]
 80002b8:	3301      	adds	r3, #1
 80002ba:	4a01      	ldr	r2, [pc, #4]	; (80002c0 <task2+0x10>)
 80002bc:	6013      	str	r3, [r2, #0]
 80002be:	e7f9      	b.n	80002b4 <task2+0x4>
 80002c0:	20000080 	.word	0x20000080

080002c4 <main>:
}

}
int main(void)
{
 80002c4:	b580      	push	{r7, lr}
 80002c6:	af00      	add	r7, sp, #0
	uart_tx_init();
 80002c8:	f000 fa62 	bl	8000790 <uart_tx_init>
	//Kernel Initialization
	osKernelInit();
 80002cc:	f000 f95a 	bl	8000584 <osKernelInit>
	//Adding Threads
	osKernelAddThreads(&task0,&task1,&task2);
 80002d0:	4a05      	ldr	r2, [pc, #20]	; (80002e8 <main+0x24>)
 80002d2:	4906      	ldr	r1, [pc, #24]	; (80002ec <main+0x28>)
 80002d4:	4806      	ldr	r0, [pc, #24]	; (80002f0 <main+0x2c>)
 80002d6:	f000 f91b 	bl	8000510 <osKernelAddThreads>
	//Set RR time quanta
	osKernelLaunch(QUANTA);
 80002da:	2064      	movs	r0, #100	; 0x64
 80002dc:	f000 f960 	bl	80005a0 <osKernelLaunch>
 80002e0:	2300      	movs	r3, #0




}
 80002e2:	4618      	mov	r0, r3
 80002e4:	bd80      	pop	{r7, pc}
 80002e6:	bf00      	nop
 80002e8:	080002b1 	.word	0x080002b1
 80002ec:	08000299 	.word	0x08000299
 80002f0:	08000281 	.word	0x08000281

080002f4 <motor_run>:


void motor_run(void)
{
 80002f4:	b580      	push	{r7, lr}
 80002f6:	af00      	add	r7, sp, #0
	printf("Motor is starting \n\r");
 80002f8:	4802      	ldr	r0, [pc, #8]	; (8000304 <motor_run+0x10>)
 80002fa:	f000 fba7 	bl	8000a4c <iprintf>
}
 80002fe:	bf00      	nop
 8000300:	bd80      	pop	{r7, pc}
 8000302:	bf00      	nop
 8000304:	08001750 	.word	0x08001750

08000308 <valve_open>:
{
	printf("Motor is stopping \n\r");
}

void valve_open(void)
{
 8000308:	b580      	push	{r7, lr}
 800030a:	af00      	add	r7, sp, #0
	printf("Valve is opening \n\r");
 800030c:	4802      	ldr	r0, [pc, #8]	; (8000318 <valve_open+0x10>)
 800030e:	f000 fb9d 	bl	8000a4c <iprintf>
}
 8000312:	bf00      	nop
 8000314:	bd80      	pop	{r7, pc}
 8000316:	bf00      	nop
 8000318:	08001780 	.word	0x08001780

0800031c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800031c:	b480      	push	{r7}
 800031e:	b083      	sub	sp, #12
 8000320:	af00      	add	r7, sp, #0
 8000322:	4603      	mov	r3, r0
 8000324:	6039      	str	r1, [r7, #0]
 8000326:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000328:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800032c:	2b00      	cmp	r3, #0
 800032e:	db0a      	blt.n	8000346 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000330:	683b      	ldr	r3, [r7, #0]
 8000332:	b2da      	uxtb	r2, r3
 8000334:	490c      	ldr	r1, [pc, #48]	; (8000368 <__NVIC_SetPriority+0x4c>)
 8000336:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800033a:	0112      	lsls	r2, r2, #4
 800033c:	b2d2      	uxtb	r2, r2
 800033e:	440b      	add	r3, r1
 8000340:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000344:	e00a      	b.n	800035c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000346:	683b      	ldr	r3, [r7, #0]
 8000348:	b2da      	uxtb	r2, r3
 800034a:	4908      	ldr	r1, [pc, #32]	; (800036c <__NVIC_SetPriority+0x50>)
 800034c:	79fb      	ldrb	r3, [r7, #7]
 800034e:	f003 030f 	and.w	r3, r3, #15
 8000352:	3b04      	subs	r3, #4
 8000354:	0112      	lsls	r2, r2, #4
 8000356:	b2d2      	uxtb	r2, r2
 8000358:	440b      	add	r3, r1
 800035a:	761a      	strb	r2, [r3, #24]
}
 800035c:	bf00      	nop
 800035e:	370c      	adds	r7, #12
 8000360:	46bd      	mov	sp, r7
 8000362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000366:	4770      	bx	lr
 8000368:	e000e100 	.word	0xe000e100
 800036c:	e000ed00 	.word	0xe000ed00

08000370 <osKernelStackInit>:

int32_t TCB_STACK [NUM_OF_THREADS][STACKSIZE]; //Holds the Stack for all the threads

//Initialization of the stack for each thread
void osKernelStackInit(int i) //i is the thread number
{
 8000370:	b480      	push	{r7}
 8000372:	b083      	sub	sp, #12
 8000374:	af00      	add	r7, sp, #0
 8000376:	6078      	str	r0, [r7, #4]
	tcbs[i].stackPt= &TCB_STACK[i][STACKSIZE - 16];
 8000378:	687b      	ldr	r3, [r7, #4]
 800037a:	f44f 72c8 	mov.w	r2, #400	; 0x190
 800037e:	fb02 f303 	mul.w	r3, r2, r3
 8000382:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8000386:	4a60      	ldr	r2, [pc, #384]	; (8000508 <osKernelStackInit+0x198>)
 8000388:	441a      	add	r2, r3
 800038a:	4960      	ldr	r1, [pc, #384]	; (800050c <osKernelStackInit+0x19c>)
 800038c:	687b      	ldr	r3, [r7, #4]
 800038e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
	//Set bit 24(T-bit) in PSR to 1, to operate in Thumb mode.
	TCB_STACK[i][STACKSIZE - 1] =  (1U<<24);   //PSR
 8000392:	4a5d      	ldr	r2, [pc, #372]	; (8000508 <osKernelStackInit+0x198>)
 8000394:	687b      	ldr	r3, [r7, #4]
 8000396:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800039a:	fb01 f303 	mul.w	r3, r1, r3
 800039e:	4413      	add	r3, r2
 80003a0:	f503 73c6 	add.w	r3, r3, #396	; 0x18c
 80003a4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80003a8:	601a      	str	r2, [r3, #0]

	//Dummy stack content for debugging
	TCB_STACK[i][STACKSIZE - 3] = 0xAAAAAAAA;  //R14 i.e LR
 80003aa:	4a57      	ldr	r2, [pc, #348]	; (8000508 <osKernelStackInit+0x198>)
 80003ac:	687b      	ldr	r3, [r7, #4]
 80003ae:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80003b2:	fb01 f303 	mul.w	r3, r1, r3
 80003b6:	4413      	add	r3, r2
 80003b8:	f503 73c2 	add.w	r3, r3, #388	; 0x184
 80003bc:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80003c0:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 4] = 0xAAAAAAAA;  //R12
 80003c2:	4a51      	ldr	r2, [pc, #324]	; (8000508 <osKernelStackInit+0x198>)
 80003c4:	687b      	ldr	r3, [r7, #4]
 80003c6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80003ca:	fb01 f303 	mul.w	r3, r1, r3
 80003ce:	4413      	add	r3, r2
 80003d0:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80003d4:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80003d8:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 5] = 0xAAAAAAAA;  //R3
 80003da:	4a4b      	ldr	r2, [pc, #300]	; (8000508 <osKernelStackInit+0x198>)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80003e2:	fb01 f303 	mul.w	r3, r1, r3
 80003e6:	4413      	add	r3, r2
 80003e8:	f503 73be 	add.w	r3, r3, #380	; 0x17c
 80003ec:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80003f0:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 6] = 0xAAAAAAAA;  //R2
 80003f2:	4a45      	ldr	r2, [pc, #276]	; (8000508 <osKernelStackInit+0x198>)
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80003fa:	fb01 f303 	mul.w	r3, r1, r3
 80003fe:	4413      	add	r3, r2
 8000400:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 8000404:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000408:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 7] = 0xAAAAAAAA;  //R1
 800040a:	4a3f      	ldr	r2, [pc, #252]	; (8000508 <osKernelStackInit+0x198>)
 800040c:	687b      	ldr	r3, [r7, #4]
 800040e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000412:	fb01 f303 	mul.w	r3, r1, r3
 8000416:	4413      	add	r3, r2
 8000418:	f503 73ba 	add.w	r3, r3, #372	; 0x174
 800041c:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000420:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 8] = 0xAAAAAAAA;  //R0
 8000422:	4a39      	ldr	r2, [pc, #228]	; (8000508 <osKernelStackInit+0x198>)
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800042a:	fb01 f303 	mul.w	r3, r1, r3
 800042e:	4413      	add	r3, r2
 8000430:	f503 73b8 	add.w	r3, r3, #368	; 0x170
 8000434:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000438:	601a      	str	r2, [r3, #0]

	TCB_STACK[i][STACKSIZE - 9] = 0xAAAAAAAA;  //R11
 800043a:	4a33      	ldr	r2, [pc, #204]	; (8000508 <osKernelStackInit+0x198>)
 800043c:	687b      	ldr	r3, [r7, #4]
 800043e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000442:	fb01 f303 	mul.w	r3, r1, r3
 8000446:	4413      	add	r3, r2
 8000448:	f503 73b6 	add.w	r3, r3, #364	; 0x16c
 800044c:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000450:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 10] = 0xAAAAAAAA; //R10
 8000452:	4a2d      	ldr	r2, [pc, #180]	; (8000508 <osKernelStackInit+0x198>)
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800045a:	fb01 f303 	mul.w	r3, r1, r3
 800045e:	4413      	add	r3, r2
 8000460:	f503 73b4 	add.w	r3, r3, #360	; 0x168
 8000464:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000468:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 11] = 0xAAAAAAAA; //R9
 800046a:	4a27      	ldr	r2, [pc, #156]	; (8000508 <osKernelStackInit+0x198>)
 800046c:	687b      	ldr	r3, [r7, #4]
 800046e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8000472:	fb01 f303 	mul.w	r3, r1, r3
 8000476:	4413      	add	r3, r2
 8000478:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800047c:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000480:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 12] = 0xAAAAAAAA; //R8
 8000482:	4a21      	ldr	r2, [pc, #132]	; (8000508 <osKernelStackInit+0x198>)
 8000484:	687b      	ldr	r3, [r7, #4]
 8000486:	f44f 71c8 	mov.w	r1, #400	; 0x190
 800048a:	fb01 f303 	mul.w	r3, r1, r3
 800048e:	4413      	add	r3, r2
 8000490:	f503 73b0 	add.w	r3, r3, #352	; 0x160
 8000494:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 8000498:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 13] = 0xAAAAAAAA; //R7
 800049a:	4a1b      	ldr	r2, [pc, #108]	; (8000508 <osKernelStackInit+0x198>)
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80004a2:	fb01 f303 	mul.w	r3, r1, r3
 80004a6:	4413      	add	r3, r2
 80004a8:	f503 73ae 	add.w	r3, r3, #348	; 0x15c
 80004ac:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80004b0:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 14] = 0xAAAAAAAA; //R6
 80004b2:	4a15      	ldr	r2, [pc, #84]	; (8000508 <osKernelStackInit+0x198>)
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80004ba:	fb01 f303 	mul.w	r3, r1, r3
 80004be:	4413      	add	r3, r2
 80004c0:	f503 73ac 	add.w	r3, r3, #344	; 0x158
 80004c4:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80004c8:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 15] = 0xAAAAAAAA; //R5
 80004ca:	4a0f      	ldr	r2, [pc, #60]	; (8000508 <osKernelStackInit+0x198>)
 80004cc:	687b      	ldr	r3, [r7, #4]
 80004ce:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80004d2:	fb01 f303 	mul.w	r3, r1, r3
 80004d6:	4413      	add	r3, r2
 80004d8:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80004dc:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80004e0:	601a      	str	r2, [r3, #0]
	TCB_STACK[i][STACKSIZE - 16] = 0xAAAAAAAA; //R4
 80004e2:	4a09      	ldr	r2, [pc, #36]	; (8000508 <osKernelStackInit+0x198>)
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	f44f 71c8 	mov.w	r1, #400	; 0x190
 80004ea:	fb01 f303 	mul.w	r3, r1, r3
 80004ee:	4413      	add	r3, r2
 80004f0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80004f4:	f04f 32aa 	mov.w	r2, #2863311530	; 0xaaaaaaaa
 80004f8:	601a      	str	r2, [r3, #0]


}
 80004fa:	bf00      	nop
 80004fc:	370c      	adds	r7, #12
 80004fe:	46bd      	mov	sp, r7
 8000500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000504:	4770      	bx	lr
 8000506:	bf00      	nop
 8000508:	200000a4 	.word	0x200000a4
 800050c:	20000088 	.word	0x20000088

08000510 <osKernelAddThreads>:

//To add threads to RTOS
/*Pass the address of the thread functions as argument,i.e address of motor main(), valve main()*/
uint8_t osKernelAddThreads(void(*task0)(void),void(*task1)(void),void(*task2)(void))
{
 8000510:	b580      	push	{r7, lr}
 8000512:	b084      	sub	sp, #16
 8000514:	af00      	add	r7, sp, #0
 8000516:	60f8      	str	r0, [r7, #12]
 8000518:	60b9      	str	r1, [r7, #8]
 800051a:	607a      	str	r2, [r7, #4]
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800051c:	b672      	cpsid	i
}
 800051e:	bf00      	nop
//Disable global interrupt
	__disable_irq();
	tcbs[0].nextPt=&tcbs[1];
 8000520:	4b13      	ldr	r3, [pc, #76]	; (8000570 <osKernelAddThreads+0x60>)
 8000522:	4a14      	ldr	r2, [pc, #80]	; (8000574 <osKernelAddThreads+0x64>)
 8000524:	605a      	str	r2, [r3, #4]
	tcbs[1].nextPt=&tcbs[2];
 8000526:	4b12      	ldr	r3, [pc, #72]	; (8000570 <osKernelAddThreads+0x60>)
 8000528:	4a13      	ldr	r2, [pc, #76]	; (8000578 <osKernelAddThreads+0x68>)
 800052a:	60da      	str	r2, [r3, #12]
	tcbs[2].nextPt=&tcbs[0];
 800052c:	4b10      	ldr	r3, [pc, #64]	; (8000570 <osKernelAddThreads+0x60>)
 800052e:	4a10      	ldr	r2, [pc, #64]	; (8000570 <osKernelAddThreads+0x60>)
 8000530:	615a      	str	r2, [r3, #20]

// Initialize stack for thread 0
	osKernelStackInit(0);
 8000532:	2000      	movs	r0, #0
 8000534:	f7ff ff1c 	bl	8000370 <osKernelStackInit>
//Initialize PC
	TCB_STACK[0][STACKSIZE - 2] = (int32_t)(task0);
 8000538:	68fb      	ldr	r3, [r7, #12]
 800053a:	4a10      	ldr	r2, [pc, #64]	; (800057c <osKernelAddThreads+0x6c>)
 800053c:	f8c2 3188 	str.w	r3, [r2, #392]	; 0x188

// Initialize stack for thread 1
	osKernelStackInit(1);
 8000540:	2001      	movs	r0, #1
 8000542:	f7ff ff15 	bl	8000370 <osKernelStackInit>
//Initialize PC
	TCB_STACK[1][STACKSIZE - 2] = (int32_t)(task1);
 8000546:	68bb      	ldr	r3, [r7, #8]
 8000548:	4a0c      	ldr	r2, [pc, #48]	; (800057c <osKernelAddThreads+0x6c>)
 800054a:	f8c2 3318 	str.w	r3, [r2, #792]	; 0x318


// Initialize stack for thread 2
    osKernelStackInit(2);
 800054e:	2002      	movs	r0, #2
 8000550:	f7ff ff0e 	bl	8000370 <osKernelStackInit>
//Initialize PC
	TCB_STACK[2][STACKSIZE - 2] = (int32_t)(task2);
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	4a09      	ldr	r2, [pc, #36]	; (800057c <osKernelAddThreads+0x6c>)
 8000558:	f8c2 34a8 	str.w	r3, [r2, #1192]	; 0x4a8

//To start from thread 0
	currentPt=&tcbs[0];
 800055c:	4b08      	ldr	r3, [pc, #32]	; (8000580 <osKernelAddThreads+0x70>)
 800055e:	4a04      	ldr	r2, [pc, #16]	; (8000570 <osKernelAddThreads+0x60>)
 8000560:	601a      	str	r2, [r3, #0]
  __ASM volatile ("cpsie i" : : : "memory");
 8000562:	b662      	cpsie	i
}
 8000564:	bf00      	nop

//Enable global interrupt
	__enable_irq();

return 1;
 8000566:	2301      	movs	r3, #1

}
 8000568:	4618      	mov	r0, r3
 800056a:	3710      	adds	r7, #16
 800056c:	46bd      	mov	sp, r7
 800056e:	bd80      	pop	{r7, pc}
 8000570:	20000088 	.word	0x20000088
 8000574:	20000090 	.word	0x20000090
 8000578:	20000098 	.word	0x20000098
 800057c:	200000a4 	.word	0x200000a4
 8000580:	200000a0 	.word	0x200000a0

08000584 <osKernelInit>:

//Initialize the kernel
//To scale down the system clock to milliseconds
void osKernelInit()
{
 8000584:	b480      	push	{r7}
 8000586:	af00      	add	r7, sp, #0
	MILLIS_PRESCALER= (BUS_FREQ/1000);
 8000588:	4b04      	ldr	r3, [pc, #16]	; (800059c <osKernelInit+0x18>)
 800058a:	f44f 527a 	mov.w	r2, #16000	; 0x3e80
 800058e:	601a      	str	r2, [r3, #0]
}
 8000590:	bf00      	nop
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000084 	.word	0x20000084

080005a0 <osKernelLaunch>:

//For providing time quanta to the threads
void osKernelLaunch(uint32_t quanta)
{
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
 80005a6:	6078      	str	r0, [r7, #4]
	//TO INITIALIZE SYSTICK INTERRUPT
//Reset systick
	SysTick->CTRL=SYSTICK_RST;
 80005a8:	4b10      	ldr	r3, [pc, #64]	; (80005ec <osKernelLaunch+0x4c>)
 80005aa:	2200      	movs	r2, #0
 80005ac:	601a      	str	r2, [r3, #0]
//Clear systic current value register
	SysTick->VAL=0;
 80005ae:	4b0f      	ldr	r3, [pc, #60]	; (80005ec <osKernelLaunch+0x4c>)
 80005b0:	2200      	movs	r2, #0
 80005b2:	609a      	str	r2, [r3, #8]
//Load quanta
	SysTick->LOAD= (quanta * MILLIS_PRESCALER)-1;
 80005b4:	4b0e      	ldr	r3, [pc, #56]	; (80005f0 <osKernelLaunch+0x50>)
 80005b6:	681b      	ldr	r3, [r3, #0]
 80005b8:	687a      	ldr	r2, [r7, #4]
 80005ba:	fb02 f303 	mul.w	r3, r2, r3
 80005be:	4a0b      	ldr	r2, [pc, #44]	; (80005ec <osKernelLaunch+0x4c>)
 80005c0:	3b01      	subs	r3, #1
 80005c2:	6053      	str	r3, [r2, #4]
//Set systick to low priority
    NVIC_SetPriority(SysTick_IRQn,15);
 80005c4:	210f      	movs	r1, #15
 80005c6:	f04f 30ff 	mov.w	r0, #4294967295
 80005ca:	f7ff fea7 	bl	800031c <__NVIC_SetPriority>
//Enable systick,select internal clock
    SysTick-> CTRL = CTRL_CLKSRC | CTRL_ENABLE;
 80005ce:	4b07      	ldr	r3, [pc, #28]	; (80005ec <osKernelLaunch+0x4c>)
 80005d0:	2205      	movs	r2, #5
 80005d2:	601a      	str	r2, [r3, #0]
//Enable system interrupt
	SysTick-> CTRL |= CTRL_TICKINT;
 80005d4:	4b05      	ldr	r3, [pc, #20]	; (80005ec <osKernelLaunch+0x4c>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a04      	ldr	r2, [pc, #16]	; (80005ec <osKernelLaunch+0x4c>)
 80005da:	f043 0302 	orr.w	r3, r3, #2
 80005de:	6013      	str	r3, [r2, #0]

//Launch scheduler.
	osSchedulerLaunch();
 80005e0:	f000 f81a 	bl	8000618 <osSchedulerLaunch>
}
 80005e4:	bf00      	nop
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	e000e010 	.word	0xe000e010
 80005f0:	20000084 	.word	0x20000084

080005f4 <SysTick_Handler>:
//To keep the stack unchanged during the execution of SysTick ISR
__attribute__((naked))void SysTick_Handler(void)
{
//1.Suspend current thread
//Disable global interrupt in Assembly to make it atomic
	__asm("CPSID  I");
 80005f4:	b672      	cpsid	i
//Save r4,r5,r6,r7,r8,r9,r10,r11 manually,because exception frame saves automatically when interrupt occurs
	__asm("PUSH {R4-R11}");
 80005f6:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
//Load address of the currentPt into R0
	__asm("LDR R0, =currentPt");
 80005fa:	4806      	ldr	r0, [pc, #24]	; (8000614 <SysTick_Handler+0x20>)
//Load r1 from address equal r0, i.e, r1=currentPt
	__asm("LDR R1,[R0]");
 80005fc:	6801      	ldr	r1, [r0, #0]
//Store cortex-M SP at address r1, i.e save sp into tcb
	__asm("STR SP,[R1]");
 80005fe:	f8c1 d000 	str.w	sp, [r1]


//2.Select next thread
//Load r1 from a location 4 bytes above address r1, i.e r1=currentPt->nextPt
	__asm("LDR R1,[R1,#4]");
 8000602:	6849      	ldr	r1, [r1, #4]
// Store r1 at address equals r0, i.e currentPt= r1
	__asm("STR R1,[R0]");
 8000604:	6001      	str	r1, [r0, #0]
//Load Cortex-M SP from address equals r1, i.e SP= currentPt->stackPt
	__asm("LDR SP,[R1]");
 8000606:	f8d1 d000 	ldr.w	sp, [r1]
//Restore r4,r5,r6,r7,r8,r9,r10,r11
	__asm("POP {R4-R11}");
 800060a:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
//Enable global interrupts
	__asm("CPSIE I");
 800060e:	b662      	cpsie	i
//Return from exception and restore r0,r1,r2,r3,r12,lr,pc,psr
//When exception occurs these registers are automatically saved onto the stack: r0,r1,r2,r3,r12,lr,pc,psr
	__asm("BX  LR");
 8000610:	4770      	bx	lr
}
 8000612:	bf00      	nop
 8000614:	200000a0 	.word	0x200000a0

08000618 <osSchedulerLaunch>:

//Will launch the first thread
void osSchedulerLaunch(void)
{
 8000618:	b480      	push	{r7}
 800061a:	af00      	add	r7, sp, #0
//1.Setiing the stack pointer

//Load address of currentPt into R0
	__asm("LDR R0,=currentPt");
 800061c:	4809      	ldr	r0, [pc, #36]	; (8000644 <osSchedulerLaunch+0x2c>)
//load r2 from the address equal r0, r2=currentPt
	__asm("LDR R2,[R0]");
 800061e:	6802      	ldr	r2, [r0, #0]
//Load cortex-M SP from address equals R2, i.e SP= currentPt->stackPt
	__asm("LDR SP,[R2]");
 8000620:	f8d2 d000 	ldr.w	sp, [r2]


//2.Discard the link register from the initial stack and then start the location and discard PSR
//Restore r4,r5,r6,r7,r8,r9,r10,r11
	__asm("POP {R4-R11}");
 8000624:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
//Restore R12(LR)
	__asm("POP {R12}");
 8000628:	f85d cb04 	ldr.w	ip, [sp], #4
//Restore r0,r1,r2,r3
	__asm("POP {R0-R3}");
 800062c:	bc0f      	pop	{r0, r1, r2, r3}
//Skip LR
	__asm("ADD SP,SP, #4");
 800062e:	b001      	add	sp, #4
//Create a new start location by popping LR
	__asm("POP {LR}");
 8000630:	f85d eb04 	ldr.w	lr, [sp], #4
//Skip PSR by adding 4 to SP
	__asm("ADD SP,SP,#4");
 8000634:	b001      	add	sp, #4
//Enable global interrupts
	__asm("CPSIE I");
 8000636:	b662      	cpsie	i
//Return from exception
	__asm("BX  LR");
 8000638:	4770      	bx	lr



}
 800063a:	bf00      	nop
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr
 8000644:	200000a0 	.word	0x200000a0

08000648 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000648:	b580      	push	{r7, lr}
 800064a:	b086      	sub	sp, #24
 800064c:	af00      	add	r7, sp, #0
 800064e:	60f8      	str	r0, [r7, #12]
 8000650:	60b9      	str	r1, [r7, #8]
 8000652:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000654:	2300      	movs	r3, #0
 8000656:	617b      	str	r3, [r7, #20]
 8000658:	e00a      	b.n	8000670 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800065a:	f3af 8000 	nop.w
 800065e:	4601      	mov	r1, r0
 8000660:	68bb      	ldr	r3, [r7, #8]
 8000662:	1c5a      	adds	r2, r3, #1
 8000664:	60ba      	str	r2, [r7, #8]
 8000666:	b2ca      	uxtb	r2, r1
 8000668:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800066a:	697b      	ldr	r3, [r7, #20]
 800066c:	3301      	adds	r3, #1
 800066e:	617b      	str	r3, [r7, #20]
 8000670:	697a      	ldr	r2, [r7, #20]
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	429a      	cmp	r2, r3
 8000676:	dbf0      	blt.n	800065a <_read+0x12>
  }

  return len;
 8000678:	687b      	ldr	r3, [r7, #4]
}
 800067a:	4618      	mov	r0, r3
 800067c:	3718      	adds	r7, #24
 800067e:	46bd      	mov	sp, r7
 8000680:	bd80      	pop	{r7, pc}

08000682 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000682:	b580      	push	{r7, lr}
 8000684:	b086      	sub	sp, #24
 8000686:	af00      	add	r7, sp, #0
 8000688:	60f8      	str	r0, [r7, #12]
 800068a:	60b9      	str	r1, [r7, #8]
 800068c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800068e:	2300      	movs	r3, #0
 8000690:	617b      	str	r3, [r7, #20]
 8000692:	e009      	b.n	80006a8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000694:	68bb      	ldr	r3, [r7, #8]
 8000696:	1c5a      	adds	r2, r3, #1
 8000698:	60ba      	str	r2, [r7, #8]
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	4618      	mov	r0, r3
 800069e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80006a2:	697b      	ldr	r3, [r7, #20]
 80006a4:	3301      	adds	r3, #1
 80006a6:	617b      	str	r3, [r7, #20]
 80006a8:	697a      	ldr	r2, [r7, #20]
 80006aa:	687b      	ldr	r3, [r7, #4]
 80006ac:	429a      	cmp	r2, r3
 80006ae:	dbf1      	blt.n	8000694 <_write+0x12>
  }
  return len;
 80006b0:	687b      	ldr	r3, [r7, #4]
}
 80006b2:	4618      	mov	r0, r3
 80006b4:	3718      	adds	r7, #24
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}

080006ba <_close>:

int _close(int file)
{
 80006ba:	b480      	push	{r7}
 80006bc:	b083      	sub	sp, #12
 80006be:	af00      	add	r7, sp, #0
 80006c0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80006c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80006c6:	4618      	mov	r0, r3
 80006c8:	370c      	adds	r7, #12
 80006ca:	46bd      	mov	sp, r7
 80006cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d0:	4770      	bx	lr

080006d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80006d2:	b480      	push	{r7}
 80006d4:	b083      	sub	sp, #12
 80006d6:	af00      	add	r7, sp, #0
 80006d8:	6078      	str	r0, [r7, #4]
 80006da:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80006dc:	683b      	ldr	r3, [r7, #0]
 80006de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80006e2:	605a      	str	r2, [r3, #4]
  return 0;
 80006e4:	2300      	movs	r3, #0
}
 80006e6:	4618      	mov	r0, r3
 80006e8:	370c      	adds	r7, #12
 80006ea:	46bd      	mov	sp, r7
 80006ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f0:	4770      	bx	lr

080006f2 <_isatty>:

int _isatty(int file)
{
 80006f2:	b480      	push	{r7}
 80006f4:	b083      	sub	sp, #12
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80006fa:	2301      	movs	r3, #1
}
 80006fc:	4618      	mov	r0, r3
 80006fe:	370c      	adds	r7, #12
 8000700:	46bd      	mov	sp, r7
 8000702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000706:	4770      	bx	lr

08000708 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	60f8      	str	r0, [r7, #12]
 8000710:	60b9      	str	r1, [r7, #8]
 8000712:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000714:	2300      	movs	r3, #0
}
 8000716:	4618      	mov	r0, r3
 8000718:	3714      	adds	r7, #20
 800071a:	46bd      	mov	sp, r7
 800071c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000720:	4770      	bx	lr
	...

08000724 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b086      	sub	sp, #24
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800072c:	4a14      	ldr	r2, [pc, #80]	; (8000780 <_sbrk+0x5c>)
 800072e:	4b15      	ldr	r3, [pc, #84]	; (8000784 <_sbrk+0x60>)
 8000730:	1ad3      	subs	r3, r2, r3
 8000732:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000734:	697b      	ldr	r3, [r7, #20]
 8000736:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000738:	4b13      	ldr	r3, [pc, #76]	; (8000788 <_sbrk+0x64>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d102      	bne.n	8000746 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000740:	4b11      	ldr	r3, [pc, #68]	; (8000788 <_sbrk+0x64>)
 8000742:	4a12      	ldr	r2, [pc, #72]	; (800078c <_sbrk+0x68>)
 8000744:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000746:	4b10      	ldr	r3, [pc, #64]	; (8000788 <_sbrk+0x64>)
 8000748:	681a      	ldr	r2, [r3, #0]
 800074a:	687b      	ldr	r3, [r7, #4]
 800074c:	4413      	add	r3, r2
 800074e:	693a      	ldr	r2, [r7, #16]
 8000750:	429a      	cmp	r2, r3
 8000752:	d207      	bcs.n	8000764 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000754:	f000 fa1e 	bl	8000b94 <__errno>
 8000758:	4603      	mov	r3, r0
 800075a:	220c      	movs	r2, #12
 800075c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800075e:	f04f 33ff 	mov.w	r3, #4294967295
 8000762:	e009      	b.n	8000778 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000764:	4b08      	ldr	r3, [pc, #32]	; (8000788 <_sbrk+0x64>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800076a:	4b07      	ldr	r3, [pc, #28]	; (8000788 <_sbrk+0x64>)
 800076c:	681a      	ldr	r2, [r3, #0]
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4413      	add	r3, r2
 8000772:	4a05      	ldr	r2, [pc, #20]	; (8000788 <_sbrk+0x64>)
 8000774:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000776:	68fb      	ldr	r3, [r7, #12]
}
 8000778:	4618      	mov	r0, r3
 800077a:	3718      	adds	r7, #24
 800077c:	46bd      	mov	sp, r7
 800077e:	bd80      	pop	{r7, pc}
 8000780:	20020000 	.word	0x20020000
 8000784:	00000400 	.word	0x00000400
 8000788:	20000554 	.word	0x20000554
 800078c:	200006a8 	.word	0x200006a8

08000790 <uart_tx_init>:
	uart_write(ch);
	return ch;

}
void uart_tx_init(void)  //UART transmit data function
{
 8000790:	b580      	push	{r7, lr}
 8000792:	af00      	add	r7, sp, #0
/*GPIO configuration for UART */
	/*Enable clock access to GPIO(PA2)*/
	/*Alternate function(TX)pin is connected to PA2,which is GPIO PA*/
	RCC->AHB1ENR |= GPIOAEN;
 8000794:	4b1f      	ldr	r3, [pc, #124]	; (8000814 <uart_tx_init+0x84>)
 8000796:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000798:	4a1e      	ldr	r2, [pc, #120]	; (8000814 <uart_tx_init+0x84>)
 800079a:	f043 0301 	orr.w	r3, r3, #1
 800079e:	6313      	str	r3, [r2, #48]	; 0x30

	/*Set PA2 mode to alternate function Mode*/
	GPIOA->MODER &=~(1U<<4);
 80007a0:	4b1d      	ldr	r3, [pc, #116]	; (8000818 <uart_tx_init+0x88>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	4a1c      	ldr	r2, [pc, #112]	; (8000818 <uart_tx_init+0x88>)
 80007a6:	f023 0310 	bic.w	r3, r3, #16
 80007aa:	6013      	str	r3, [r2, #0]
	GPIOA->MODER |=(1U<<5);
 80007ac:	4b1a      	ldr	r3, [pc, #104]	; (8000818 <uart_tx_init+0x88>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	4a19      	ldr	r2, [pc, #100]	; (8000818 <uart_tx_init+0x88>)
 80007b2:	f043 0320 	orr.w	r3, r3, #32
 80007b6:	6013      	str	r3, [r2, #0]

	/*Set alternate function TYPE to AF07(UART2_TX)*/
	GPIOA->AFR[0] |=(1U<<8);
 80007b8:	4b17      	ldr	r3, [pc, #92]	; (8000818 <uart_tx_init+0x88>)
 80007ba:	6a1b      	ldr	r3, [r3, #32]
 80007bc:	4a16      	ldr	r2, [pc, #88]	; (8000818 <uart_tx_init+0x88>)
 80007be:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c2:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<9);
 80007c4:	4b14      	ldr	r3, [pc, #80]	; (8000818 <uart_tx_init+0x88>)
 80007c6:	6a1b      	ldr	r3, [r3, #32]
 80007c8:	4a13      	ldr	r2, [pc, #76]	; (8000818 <uart_tx_init+0x88>)
 80007ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80007ce:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] |=(1U<<10);
 80007d0:	4b11      	ldr	r3, [pc, #68]	; (8000818 <uart_tx_init+0x88>)
 80007d2:	6a1b      	ldr	r3, [r3, #32]
 80007d4:	4a10      	ldr	r2, [pc, #64]	; (8000818 <uart_tx_init+0x88>)
 80007d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80007da:	6213      	str	r3, [r2, #32]
	GPIOA->AFR[0] &=~(1U<<11);
 80007dc:	4b0e      	ldr	r3, [pc, #56]	; (8000818 <uart_tx_init+0x88>)
 80007de:	6a1b      	ldr	r3, [r3, #32]
 80007e0:	4a0d      	ldr	r2, [pc, #52]	; (8000818 <uart_tx_init+0x88>)
 80007e2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80007e6:	6213      	str	r3, [r2, #32]

/*Configure UART module itself*/
    /*Enable clock access to USART2*/
	RCC->APB1ENR |= UART2EN;
 80007e8:	4b0a      	ldr	r3, [pc, #40]	; (8000814 <uart_tx_init+0x84>)
 80007ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007ec:	4a09      	ldr	r2, [pc, #36]	; (8000814 <uart_tx_init+0x84>)
 80007ee:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80007f2:	6413      	str	r3, [r2, #64]	; 0x40

/*Configure baud rate*/
	uart_set_baudrate(APB1_CLK,UART_BAUDRATE);
 80007f4:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
 80007f8:	4808      	ldr	r0, [pc, #32]	; (800081c <uart_tx_init+0x8c>)
 80007fa:	f000 f813 	bl	8000824 <uart_set_baudrate>

/*Configure transfer direction to TX,in CR1 enable TE(Transmitter Enable)*/
    USART2-> CR1 =  CR1_TE; //Setting everything to 0 except TE bit
 80007fe:	4b08      	ldr	r3, [pc, #32]	; (8000820 <uart_tx_init+0x90>)
 8000800:	2208      	movs	r2, #8
 8000802:	60da      	str	r2, [r3, #12]

/*Enable UART module*/
    USART2-> CR1 |= CR1_UE;
 8000804:	4b06      	ldr	r3, [pc, #24]	; (8000820 <uart_tx_init+0x90>)
 8000806:	68db      	ldr	r3, [r3, #12]
 8000808:	4a05      	ldr	r2, [pc, #20]	; (8000820 <uart_tx_init+0x90>)
 800080a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 800080e:	60d3      	str	r3, [r2, #12]
}
 8000810:	bf00      	nop
 8000812:	bd80      	pop	{r7, pc}
 8000814:	40023800 	.word	0x40023800
 8000818:	40020000 	.word	0x40020000
 800081c:	00f42400 	.word	0x00f42400
 8000820:	40004400 	.word	0x40004400

08000824 <uart_set_baudrate>:
	USART2->DR = (ch & 0xFF);/*0xFF, the bit mask ensures that only the least significant 8 bits of ch are considered.
	                          To ensure that only the ASCII character (8 bits) is transmitted.*/
	}
//Write baud rate to UART BRR reg, to set UART baud rate
static void uart_set_baudrate(uint32_t periph_clk, uint32_t baudrate)
{
 8000824:	b580      	push	{r7, lr}
 8000826:	b082      	sub	sp, #8
 8000828:	af00      	add	r7, sp, #0
 800082a:	6078      	str	r0, [r7, #4]
 800082c:	6039      	str	r1, [r7, #0]
	USART2->BRR= compute_uart_bd(periph_clk,baudrate);
 800082e:	6839      	ldr	r1, [r7, #0]
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f000 f80b 	bl	800084c <compute_uart_bd>
 8000836:	4603      	mov	r3, r0
 8000838:	461a      	mov	r2, r3
 800083a:	4b03      	ldr	r3, [pc, #12]	; (8000848 <uart_set_baudrate+0x24>)
 800083c:	609a      	str	r2, [r3, #8]
	}
 800083e:	bf00      	nop
 8000840:	3708      	adds	r7, #8
 8000842:	46bd      	mov	sp, r7
 8000844:	bd80      	pop	{r7, pc}
 8000846:	bf00      	nop
 8000848:	40004400 	.word	0x40004400

0800084c <compute_uart_bd>:
//To configure the baud rate
static uint16_t compute_uart_bd(uint32_t periph_clk, uint32_t baudrate)
{
 800084c:	b480      	push	{r7}
 800084e:	b083      	sub	sp, #12
 8000850:	af00      	add	r7, sp, #0
 8000852:	6078      	str	r0, [r7, #4]
 8000854:	6039      	str	r1, [r7, #0]
	return (periph_clk +(baudrate /2U))/baudrate;
 8000856:	683b      	ldr	r3, [r7, #0]
 8000858:	085a      	lsrs	r2, r3, #1
 800085a:	687b      	ldr	r3, [r7, #4]
 800085c:	441a      	add	r2, r3
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	fbb2 f3f3 	udiv	r3, r2, r3
 8000864:	b29b      	uxth	r3, r3
	}
 8000866:	4618      	mov	r0, r3
 8000868:	370c      	adds	r7, #12
 800086a:	46bd      	mov	sp, r7
 800086c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000870:	4770      	bx	lr
	...

08000874 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000874:	480d      	ldr	r0, [pc, #52]	; (80008ac <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000876:	4685      	mov	sp, r0
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000878:	f3af 8000 	nop.w

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800087c:	480c      	ldr	r0, [pc, #48]	; (80008b0 <LoopForever+0x6>)
  ldr r1, =_edata
 800087e:	490d      	ldr	r1, [pc, #52]	; (80008b4 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000880:	4a0d      	ldr	r2, [pc, #52]	; (80008b8 <LoopForever+0xe>)
  movs r3, #0
 8000882:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000884:	e002      	b.n	800088c <LoopCopyDataInit>

08000886 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000886:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000888:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800088a:	3304      	adds	r3, #4

0800088c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800088c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800088e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000890:	d3f9      	bcc.n	8000886 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000892:	4a0a      	ldr	r2, [pc, #40]	; (80008bc <LoopForever+0x12>)
  ldr r4, =_ebss
 8000894:	4c0a      	ldr	r4, [pc, #40]	; (80008c0 <LoopForever+0x16>)
  movs r3, #0
 8000896:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000898:	e001      	b.n	800089e <LoopFillZerobss>

0800089a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800089a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800089c:	3204      	adds	r2, #4

0800089e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800089e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80008a0:	d3fb      	bcc.n	800089a <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80008a2:	f000 f97d 	bl	8000ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80008a6:	f7ff fd0d 	bl	80002c4 <main>

080008aa <LoopForever>:

LoopForever:
  b LoopForever
 80008aa:	e7fe      	b.n	80008aa <LoopForever>
  ldr   r0, =_estack
 80008ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80008b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80008b4:	2000005c 	.word	0x2000005c
  ldr r2, =_sidata
 80008b8:	080017e4 	.word	0x080017e4
  ldr r2, =_sbss
 80008bc:	2000005c 	.word	0x2000005c
  ldr r4, =_ebss
 80008c0:	200006a4 	.word	0x200006a4

080008c4 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80008c4:	e7fe      	b.n	80008c4 <ADC_IRQHandler>
	...

080008c8 <std>:
 80008c8:	2300      	movs	r3, #0
 80008ca:	b510      	push	{r4, lr}
 80008cc:	4604      	mov	r4, r0
 80008ce:	e9c0 3300 	strd	r3, r3, [r0]
 80008d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80008d6:	6083      	str	r3, [r0, #8]
 80008d8:	8181      	strh	r1, [r0, #12]
 80008da:	6643      	str	r3, [r0, #100]	; 0x64
 80008dc:	81c2      	strh	r2, [r0, #14]
 80008de:	6183      	str	r3, [r0, #24]
 80008e0:	4619      	mov	r1, r3
 80008e2:	2208      	movs	r2, #8
 80008e4:	305c      	adds	r0, #92	; 0x5c
 80008e6:	f000 f906 	bl	8000af6 <memset>
 80008ea:	4b0d      	ldr	r3, [pc, #52]	; (8000920 <std+0x58>)
 80008ec:	6263      	str	r3, [r4, #36]	; 0x24
 80008ee:	4b0d      	ldr	r3, [pc, #52]	; (8000924 <std+0x5c>)
 80008f0:	62a3      	str	r3, [r4, #40]	; 0x28
 80008f2:	4b0d      	ldr	r3, [pc, #52]	; (8000928 <std+0x60>)
 80008f4:	62e3      	str	r3, [r4, #44]	; 0x2c
 80008f6:	4b0d      	ldr	r3, [pc, #52]	; (800092c <std+0x64>)
 80008f8:	6323      	str	r3, [r4, #48]	; 0x30
 80008fa:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <std+0x68>)
 80008fc:	6224      	str	r4, [r4, #32]
 80008fe:	429c      	cmp	r4, r3
 8000900:	d006      	beq.n	8000910 <std+0x48>
 8000902:	f103 0268 	add.w	r2, r3, #104	; 0x68
 8000906:	4294      	cmp	r4, r2
 8000908:	d002      	beq.n	8000910 <std+0x48>
 800090a:	33d0      	adds	r3, #208	; 0xd0
 800090c:	429c      	cmp	r4, r3
 800090e:	d105      	bne.n	800091c <std+0x54>
 8000910:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8000914:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000918:	f000 b966 	b.w	8000be8 <__retarget_lock_init_recursive>
 800091c:	bd10      	pop	{r4, pc}
 800091e:	bf00      	nop
 8000920:	08000a71 	.word	0x08000a71
 8000924:	08000a93 	.word	0x08000a93
 8000928:	08000acb 	.word	0x08000acb
 800092c:	08000aef 	.word	0x08000aef
 8000930:	20000558 	.word	0x20000558

08000934 <stdio_exit_handler>:
 8000934:	4a02      	ldr	r2, [pc, #8]	; (8000940 <stdio_exit_handler+0xc>)
 8000936:	4903      	ldr	r1, [pc, #12]	; (8000944 <stdio_exit_handler+0x10>)
 8000938:	4803      	ldr	r0, [pc, #12]	; (8000948 <stdio_exit_handler+0x14>)
 800093a:	f000 b869 	b.w	8000a10 <_fwalk_sglue>
 800093e:	bf00      	nop
 8000940:	20000000 	.word	0x20000000
 8000944:	08001495 	.word	0x08001495
 8000948:	2000000c 	.word	0x2000000c

0800094c <cleanup_stdio>:
 800094c:	6841      	ldr	r1, [r0, #4]
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <cleanup_stdio+0x34>)
 8000950:	4299      	cmp	r1, r3
 8000952:	b510      	push	{r4, lr}
 8000954:	4604      	mov	r4, r0
 8000956:	d001      	beq.n	800095c <cleanup_stdio+0x10>
 8000958:	f000 fd9c 	bl	8001494 <_fflush_r>
 800095c:	68a1      	ldr	r1, [r4, #8]
 800095e:	4b09      	ldr	r3, [pc, #36]	; (8000984 <cleanup_stdio+0x38>)
 8000960:	4299      	cmp	r1, r3
 8000962:	d002      	beq.n	800096a <cleanup_stdio+0x1e>
 8000964:	4620      	mov	r0, r4
 8000966:	f000 fd95 	bl	8001494 <_fflush_r>
 800096a:	68e1      	ldr	r1, [r4, #12]
 800096c:	4b06      	ldr	r3, [pc, #24]	; (8000988 <cleanup_stdio+0x3c>)
 800096e:	4299      	cmp	r1, r3
 8000970:	d004      	beq.n	800097c <cleanup_stdio+0x30>
 8000972:	4620      	mov	r0, r4
 8000974:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8000978:	f000 bd8c 	b.w	8001494 <_fflush_r>
 800097c:	bd10      	pop	{r4, pc}
 800097e:	bf00      	nop
 8000980:	20000558 	.word	0x20000558
 8000984:	200005c0 	.word	0x200005c0
 8000988:	20000628 	.word	0x20000628

0800098c <global_stdio_init.part.0>:
 800098c:	b510      	push	{r4, lr}
 800098e:	4b0b      	ldr	r3, [pc, #44]	; (80009bc <global_stdio_init.part.0+0x30>)
 8000990:	4c0b      	ldr	r4, [pc, #44]	; (80009c0 <global_stdio_init.part.0+0x34>)
 8000992:	4a0c      	ldr	r2, [pc, #48]	; (80009c4 <global_stdio_init.part.0+0x38>)
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	4620      	mov	r0, r4
 8000998:	2200      	movs	r2, #0
 800099a:	2104      	movs	r1, #4
 800099c:	f7ff ff94 	bl	80008c8 <std>
 80009a0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80009a4:	2201      	movs	r2, #1
 80009a6:	2109      	movs	r1, #9
 80009a8:	f7ff ff8e 	bl	80008c8 <std>
 80009ac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80009b0:	2202      	movs	r2, #2
 80009b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009b6:	2112      	movs	r1, #18
 80009b8:	f7ff bf86 	b.w	80008c8 <std>
 80009bc:	20000690 	.word	0x20000690
 80009c0:	20000558 	.word	0x20000558
 80009c4:	08000935 	.word	0x08000935

080009c8 <__sfp_lock_acquire>:
 80009c8:	4801      	ldr	r0, [pc, #4]	; (80009d0 <__sfp_lock_acquire+0x8>)
 80009ca:	f000 b90e 	b.w	8000bea <__retarget_lock_acquire_recursive>
 80009ce:	bf00      	nop
 80009d0:	20000699 	.word	0x20000699

080009d4 <__sfp_lock_release>:
 80009d4:	4801      	ldr	r0, [pc, #4]	; (80009dc <__sfp_lock_release+0x8>)
 80009d6:	f000 b909 	b.w	8000bec <__retarget_lock_release_recursive>
 80009da:	bf00      	nop
 80009dc:	20000699 	.word	0x20000699

080009e0 <__sinit>:
 80009e0:	b510      	push	{r4, lr}
 80009e2:	4604      	mov	r4, r0
 80009e4:	f7ff fff0 	bl	80009c8 <__sfp_lock_acquire>
 80009e8:	6a23      	ldr	r3, [r4, #32]
 80009ea:	b11b      	cbz	r3, 80009f4 <__sinit+0x14>
 80009ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80009f0:	f7ff bff0 	b.w	80009d4 <__sfp_lock_release>
 80009f4:	4b04      	ldr	r3, [pc, #16]	; (8000a08 <__sinit+0x28>)
 80009f6:	6223      	str	r3, [r4, #32]
 80009f8:	4b04      	ldr	r3, [pc, #16]	; (8000a0c <__sinit+0x2c>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	2b00      	cmp	r3, #0
 80009fe:	d1f5      	bne.n	80009ec <__sinit+0xc>
 8000a00:	f7ff ffc4 	bl	800098c <global_stdio_init.part.0>
 8000a04:	e7f2      	b.n	80009ec <__sinit+0xc>
 8000a06:	bf00      	nop
 8000a08:	0800094d 	.word	0x0800094d
 8000a0c:	20000690 	.word	0x20000690

08000a10 <_fwalk_sglue>:
 8000a10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000a14:	4607      	mov	r7, r0
 8000a16:	4688      	mov	r8, r1
 8000a18:	4614      	mov	r4, r2
 8000a1a:	2600      	movs	r6, #0
 8000a1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8000a20:	f1b9 0901 	subs.w	r9, r9, #1
 8000a24:	d505      	bpl.n	8000a32 <_fwalk_sglue+0x22>
 8000a26:	6824      	ldr	r4, [r4, #0]
 8000a28:	2c00      	cmp	r4, #0
 8000a2a:	d1f7      	bne.n	8000a1c <_fwalk_sglue+0xc>
 8000a2c:	4630      	mov	r0, r6
 8000a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000a32:	89ab      	ldrh	r3, [r5, #12]
 8000a34:	2b01      	cmp	r3, #1
 8000a36:	d907      	bls.n	8000a48 <_fwalk_sglue+0x38>
 8000a38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8000a3c:	3301      	adds	r3, #1
 8000a3e:	d003      	beq.n	8000a48 <_fwalk_sglue+0x38>
 8000a40:	4629      	mov	r1, r5
 8000a42:	4638      	mov	r0, r7
 8000a44:	47c0      	blx	r8
 8000a46:	4306      	orrs	r6, r0
 8000a48:	3568      	adds	r5, #104	; 0x68
 8000a4a:	e7e9      	b.n	8000a20 <_fwalk_sglue+0x10>

08000a4c <iprintf>:
 8000a4c:	b40f      	push	{r0, r1, r2, r3}
 8000a4e:	b507      	push	{r0, r1, r2, lr}
 8000a50:	4906      	ldr	r1, [pc, #24]	; (8000a6c <iprintf+0x20>)
 8000a52:	ab04      	add	r3, sp, #16
 8000a54:	6808      	ldr	r0, [r1, #0]
 8000a56:	f853 2b04 	ldr.w	r2, [r3], #4
 8000a5a:	6881      	ldr	r1, [r0, #8]
 8000a5c:	9301      	str	r3, [sp, #4]
 8000a5e:	f000 f9e9 	bl	8000e34 <_vfiprintf_r>
 8000a62:	b003      	add	sp, #12
 8000a64:	f85d eb04 	ldr.w	lr, [sp], #4
 8000a68:	b004      	add	sp, #16
 8000a6a:	4770      	bx	lr
 8000a6c:	20000058 	.word	0x20000058

08000a70 <__sread>:
 8000a70:	b510      	push	{r4, lr}
 8000a72:	460c      	mov	r4, r1
 8000a74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000a78:	f000 f868 	bl	8000b4c <_read_r>
 8000a7c:	2800      	cmp	r0, #0
 8000a7e:	bfab      	itete	ge
 8000a80:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8000a82:	89a3      	ldrhlt	r3, [r4, #12]
 8000a84:	181b      	addge	r3, r3, r0
 8000a86:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8000a8a:	bfac      	ite	ge
 8000a8c:	6563      	strge	r3, [r4, #84]	; 0x54
 8000a8e:	81a3      	strhlt	r3, [r4, #12]
 8000a90:	bd10      	pop	{r4, pc}

08000a92 <__swrite>:
 8000a92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8000a96:	461f      	mov	r7, r3
 8000a98:	898b      	ldrh	r3, [r1, #12]
 8000a9a:	05db      	lsls	r3, r3, #23
 8000a9c:	4605      	mov	r5, r0
 8000a9e:	460c      	mov	r4, r1
 8000aa0:	4616      	mov	r6, r2
 8000aa2:	d505      	bpl.n	8000ab0 <__swrite+0x1e>
 8000aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000aa8:	2302      	movs	r3, #2
 8000aaa:	2200      	movs	r2, #0
 8000aac:	f000 f83c 	bl	8000b28 <_lseek_r>
 8000ab0:	89a3      	ldrh	r3, [r4, #12]
 8000ab2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8000ab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8000aba:	81a3      	strh	r3, [r4, #12]
 8000abc:	4632      	mov	r2, r6
 8000abe:	463b      	mov	r3, r7
 8000ac0:	4628      	mov	r0, r5
 8000ac2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8000ac6:	f000 b853 	b.w	8000b70 <_write_r>

08000aca <__sseek>:
 8000aca:	b510      	push	{r4, lr}
 8000acc:	460c      	mov	r4, r1
 8000ace:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000ad2:	f000 f829 	bl	8000b28 <_lseek_r>
 8000ad6:	1c43      	adds	r3, r0, #1
 8000ad8:	89a3      	ldrh	r3, [r4, #12]
 8000ada:	bf15      	itete	ne
 8000adc:	6560      	strne	r0, [r4, #84]	; 0x54
 8000ade:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8000ae2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8000ae6:	81a3      	strheq	r3, [r4, #12]
 8000ae8:	bf18      	it	ne
 8000aea:	81a3      	strhne	r3, [r4, #12]
 8000aec:	bd10      	pop	{r4, pc}

08000aee <__sclose>:
 8000aee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8000af2:	f000 b809 	b.w	8000b08 <_close_r>

08000af6 <memset>:
 8000af6:	4402      	add	r2, r0
 8000af8:	4603      	mov	r3, r0
 8000afa:	4293      	cmp	r3, r2
 8000afc:	d100      	bne.n	8000b00 <memset+0xa>
 8000afe:	4770      	bx	lr
 8000b00:	f803 1b01 	strb.w	r1, [r3], #1
 8000b04:	e7f9      	b.n	8000afa <memset+0x4>
	...

08000b08 <_close_r>:
 8000b08:	b538      	push	{r3, r4, r5, lr}
 8000b0a:	4d06      	ldr	r5, [pc, #24]	; (8000b24 <_close_r+0x1c>)
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	4604      	mov	r4, r0
 8000b10:	4608      	mov	r0, r1
 8000b12:	602b      	str	r3, [r5, #0]
 8000b14:	f7ff fdd1 	bl	80006ba <_close>
 8000b18:	1c43      	adds	r3, r0, #1
 8000b1a:	d102      	bne.n	8000b22 <_close_r+0x1a>
 8000b1c:	682b      	ldr	r3, [r5, #0]
 8000b1e:	b103      	cbz	r3, 8000b22 <_close_r+0x1a>
 8000b20:	6023      	str	r3, [r4, #0]
 8000b22:	bd38      	pop	{r3, r4, r5, pc}
 8000b24:	20000694 	.word	0x20000694

08000b28 <_lseek_r>:
 8000b28:	b538      	push	{r3, r4, r5, lr}
 8000b2a:	4d07      	ldr	r5, [pc, #28]	; (8000b48 <_lseek_r+0x20>)
 8000b2c:	4604      	mov	r4, r0
 8000b2e:	4608      	mov	r0, r1
 8000b30:	4611      	mov	r1, r2
 8000b32:	2200      	movs	r2, #0
 8000b34:	602a      	str	r2, [r5, #0]
 8000b36:	461a      	mov	r2, r3
 8000b38:	f7ff fde6 	bl	8000708 <_lseek>
 8000b3c:	1c43      	adds	r3, r0, #1
 8000b3e:	d102      	bne.n	8000b46 <_lseek_r+0x1e>
 8000b40:	682b      	ldr	r3, [r5, #0]
 8000b42:	b103      	cbz	r3, 8000b46 <_lseek_r+0x1e>
 8000b44:	6023      	str	r3, [r4, #0]
 8000b46:	bd38      	pop	{r3, r4, r5, pc}
 8000b48:	20000694 	.word	0x20000694

08000b4c <_read_r>:
 8000b4c:	b538      	push	{r3, r4, r5, lr}
 8000b4e:	4d07      	ldr	r5, [pc, #28]	; (8000b6c <_read_r+0x20>)
 8000b50:	4604      	mov	r4, r0
 8000b52:	4608      	mov	r0, r1
 8000b54:	4611      	mov	r1, r2
 8000b56:	2200      	movs	r2, #0
 8000b58:	602a      	str	r2, [r5, #0]
 8000b5a:	461a      	mov	r2, r3
 8000b5c:	f7ff fd74 	bl	8000648 <_read>
 8000b60:	1c43      	adds	r3, r0, #1
 8000b62:	d102      	bne.n	8000b6a <_read_r+0x1e>
 8000b64:	682b      	ldr	r3, [r5, #0]
 8000b66:	b103      	cbz	r3, 8000b6a <_read_r+0x1e>
 8000b68:	6023      	str	r3, [r4, #0]
 8000b6a:	bd38      	pop	{r3, r4, r5, pc}
 8000b6c:	20000694 	.word	0x20000694

08000b70 <_write_r>:
 8000b70:	b538      	push	{r3, r4, r5, lr}
 8000b72:	4d07      	ldr	r5, [pc, #28]	; (8000b90 <_write_r+0x20>)
 8000b74:	4604      	mov	r4, r0
 8000b76:	4608      	mov	r0, r1
 8000b78:	4611      	mov	r1, r2
 8000b7a:	2200      	movs	r2, #0
 8000b7c:	602a      	str	r2, [r5, #0]
 8000b7e:	461a      	mov	r2, r3
 8000b80:	f7ff fd7f 	bl	8000682 <_write>
 8000b84:	1c43      	adds	r3, r0, #1
 8000b86:	d102      	bne.n	8000b8e <_write_r+0x1e>
 8000b88:	682b      	ldr	r3, [r5, #0]
 8000b8a:	b103      	cbz	r3, 8000b8e <_write_r+0x1e>
 8000b8c:	6023      	str	r3, [r4, #0]
 8000b8e:	bd38      	pop	{r3, r4, r5, pc}
 8000b90:	20000694 	.word	0x20000694

08000b94 <__errno>:
 8000b94:	4b01      	ldr	r3, [pc, #4]	; (8000b9c <__errno+0x8>)
 8000b96:	6818      	ldr	r0, [r3, #0]
 8000b98:	4770      	bx	lr
 8000b9a:	bf00      	nop
 8000b9c:	20000058 	.word	0x20000058

08000ba0 <__libc_init_array>:
 8000ba0:	b570      	push	{r4, r5, r6, lr}
 8000ba2:	4d0d      	ldr	r5, [pc, #52]	; (8000bd8 <__libc_init_array+0x38>)
 8000ba4:	4c0d      	ldr	r4, [pc, #52]	; (8000bdc <__libc_init_array+0x3c>)
 8000ba6:	1b64      	subs	r4, r4, r5
 8000ba8:	10a4      	asrs	r4, r4, #2
 8000baa:	2600      	movs	r6, #0
 8000bac:	42a6      	cmp	r6, r4
 8000bae:	d109      	bne.n	8000bc4 <__libc_init_array+0x24>
 8000bb0:	4d0b      	ldr	r5, [pc, #44]	; (8000be0 <__libc_init_array+0x40>)
 8000bb2:	4c0c      	ldr	r4, [pc, #48]	; (8000be4 <__libc_init_array+0x44>)
 8000bb4:	f000 fdc0 	bl	8001738 <_init>
 8000bb8:	1b64      	subs	r4, r4, r5
 8000bba:	10a4      	asrs	r4, r4, #2
 8000bbc:	2600      	movs	r6, #0
 8000bbe:	42a6      	cmp	r6, r4
 8000bc0:	d105      	bne.n	8000bce <__libc_init_array+0x2e>
 8000bc2:	bd70      	pop	{r4, r5, r6, pc}
 8000bc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bc8:	4798      	blx	r3
 8000bca:	3601      	adds	r6, #1
 8000bcc:	e7ee      	b.n	8000bac <__libc_init_array+0xc>
 8000bce:	f855 3b04 	ldr.w	r3, [r5], #4
 8000bd2:	4798      	blx	r3
 8000bd4:	3601      	adds	r6, #1
 8000bd6:	e7f2      	b.n	8000bbe <__libc_init_array+0x1e>
 8000bd8:	080017dc 	.word	0x080017dc
 8000bdc:	080017dc 	.word	0x080017dc
 8000be0:	080017dc 	.word	0x080017dc
 8000be4:	080017e0 	.word	0x080017e0

08000be8 <__retarget_lock_init_recursive>:
 8000be8:	4770      	bx	lr

08000bea <__retarget_lock_acquire_recursive>:
 8000bea:	4770      	bx	lr

08000bec <__retarget_lock_release_recursive>:
 8000bec:	4770      	bx	lr
	...

08000bf0 <_free_r>:
 8000bf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8000bf2:	2900      	cmp	r1, #0
 8000bf4:	d044      	beq.n	8000c80 <_free_r+0x90>
 8000bf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8000bfa:	9001      	str	r0, [sp, #4]
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	f1a1 0404 	sub.w	r4, r1, #4
 8000c02:	bfb8      	it	lt
 8000c04:	18e4      	addlt	r4, r4, r3
 8000c06:	f000 f8df 	bl	8000dc8 <__malloc_lock>
 8000c0a:	4a1e      	ldr	r2, [pc, #120]	; (8000c84 <_free_r+0x94>)
 8000c0c:	9801      	ldr	r0, [sp, #4]
 8000c0e:	6813      	ldr	r3, [r2, #0]
 8000c10:	b933      	cbnz	r3, 8000c20 <_free_r+0x30>
 8000c12:	6063      	str	r3, [r4, #4]
 8000c14:	6014      	str	r4, [r2, #0]
 8000c16:	b003      	add	sp, #12
 8000c18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8000c1c:	f000 b8da 	b.w	8000dd4 <__malloc_unlock>
 8000c20:	42a3      	cmp	r3, r4
 8000c22:	d908      	bls.n	8000c36 <_free_r+0x46>
 8000c24:	6825      	ldr	r5, [r4, #0]
 8000c26:	1961      	adds	r1, r4, r5
 8000c28:	428b      	cmp	r3, r1
 8000c2a:	bf01      	itttt	eq
 8000c2c:	6819      	ldreq	r1, [r3, #0]
 8000c2e:	685b      	ldreq	r3, [r3, #4]
 8000c30:	1949      	addeq	r1, r1, r5
 8000c32:	6021      	streq	r1, [r4, #0]
 8000c34:	e7ed      	b.n	8000c12 <_free_r+0x22>
 8000c36:	461a      	mov	r2, r3
 8000c38:	685b      	ldr	r3, [r3, #4]
 8000c3a:	b10b      	cbz	r3, 8000c40 <_free_r+0x50>
 8000c3c:	42a3      	cmp	r3, r4
 8000c3e:	d9fa      	bls.n	8000c36 <_free_r+0x46>
 8000c40:	6811      	ldr	r1, [r2, #0]
 8000c42:	1855      	adds	r5, r2, r1
 8000c44:	42a5      	cmp	r5, r4
 8000c46:	d10b      	bne.n	8000c60 <_free_r+0x70>
 8000c48:	6824      	ldr	r4, [r4, #0]
 8000c4a:	4421      	add	r1, r4
 8000c4c:	1854      	adds	r4, r2, r1
 8000c4e:	42a3      	cmp	r3, r4
 8000c50:	6011      	str	r1, [r2, #0]
 8000c52:	d1e0      	bne.n	8000c16 <_free_r+0x26>
 8000c54:	681c      	ldr	r4, [r3, #0]
 8000c56:	685b      	ldr	r3, [r3, #4]
 8000c58:	6053      	str	r3, [r2, #4]
 8000c5a:	440c      	add	r4, r1
 8000c5c:	6014      	str	r4, [r2, #0]
 8000c5e:	e7da      	b.n	8000c16 <_free_r+0x26>
 8000c60:	d902      	bls.n	8000c68 <_free_r+0x78>
 8000c62:	230c      	movs	r3, #12
 8000c64:	6003      	str	r3, [r0, #0]
 8000c66:	e7d6      	b.n	8000c16 <_free_r+0x26>
 8000c68:	6825      	ldr	r5, [r4, #0]
 8000c6a:	1961      	adds	r1, r4, r5
 8000c6c:	428b      	cmp	r3, r1
 8000c6e:	bf04      	itt	eq
 8000c70:	6819      	ldreq	r1, [r3, #0]
 8000c72:	685b      	ldreq	r3, [r3, #4]
 8000c74:	6063      	str	r3, [r4, #4]
 8000c76:	bf04      	itt	eq
 8000c78:	1949      	addeq	r1, r1, r5
 8000c7a:	6021      	streq	r1, [r4, #0]
 8000c7c:	6054      	str	r4, [r2, #4]
 8000c7e:	e7ca      	b.n	8000c16 <_free_r+0x26>
 8000c80:	b003      	add	sp, #12
 8000c82:	bd30      	pop	{r4, r5, pc}
 8000c84:	2000069c 	.word	0x2000069c

08000c88 <sbrk_aligned>:
 8000c88:	b570      	push	{r4, r5, r6, lr}
 8000c8a:	4e0e      	ldr	r6, [pc, #56]	; (8000cc4 <sbrk_aligned+0x3c>)
 8000c8c:	460c      	mov	r4, r1
 8000c8e:	6831      	ldr	r1, [r6, #0]
 8000c90:	4605      	mov	r5, r0
 8000c92:	b911      	cbnz	r1, 8000c9a <sbrk_aligned+0x12>
 8000c94:	f000 fcbc 	bl	8001610 <_sbrk_r>
 8000c98:	6030      	str	r0, [r6, #0]
 8000c9a:	4621      	mov	r1, r4
 8000c9c:	4628      	mov	r0, r5
 8000c9e:	f000 fcb7 	bl	8001610 <_sbrk_r>
 8000ca2:	1c43      	adds	r3, r0, #1
 8000ca4:	d00a      	beq.n	8000cbc <sbrk_aligned+0x34>
 8000ca6:	1cc4      	adds	r4, r0, #3
 8000ca8:	f024 0403 	bic.w	r4, r4, #3
 8000cac:	42a0      	cmp	r0, r4
 8000cae:	d007      	beq.n	8000cc0 <sbrk_aligned+0x38>
 8000cb0:	1a21      	subs	r1, r4, r0
 8000cb2:	4628      	mov	r0, r5
 8000cb4:	f000 fcac 	bl	8001610 <_sbrk_r>
 8000cb8:	3001      	adds	r0, #1
 8000cba:	d101      	bne.n	8000cc0 <sbrk_aligned+0x38>
 8000cbc:	f04f 34ff 	mov.w	r4, #4294967295
 8000cc0:	4620      	mov	r0, r4
 8000cc2:	bd70      	pop	{r4, r5, r6, pc}
 8000cc4:	200006a0 	.word	0x200006a0

08000cc8 <_malloc_r>:
 8000cc8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000ccc:	1ccd      	adds	r5, r1, #3
 8000cce:	f025 0503 	bic.w	r5, r5, #3
 8000cd2:	3508      	adds	r5, #8
 8000cd4:	2d0c      	cmp	r5, #12
 8000cd6:	bf38      	it	cc
 8000cd8:	250c      	movcc	r5, #12
 8000cda:	2d00      	cmp	r5, #0
 8000cdc:	4607      	mov	r7, r0
 8000cde:	db01      	blt.n	8000ce4 <_malloc_r+0x1c>
 8000ce0:	42a9      	cmp	r1, r5
 8000ce2:	d905      	bls.n	8000cf0 <_malloc_r+0x28>
 8000ce4:	230c      	movs	r3, #12
 8000ce6:	603b      	str	r3, [r7, #0]
 8000ce8:	2600      	movs	r6, #0
 8000cea:	4630      	mov	r0, r6
 8000cec:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8000cf0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8000dc4 <_malloc_r+0xfc>
 8000cf4:	f000 f868 	bl	8000dc8 <__malloc_lock>
 8000cf8:	f8d8 3000 	ldr.w	r3, [r8]
 8000cfc:	461c      	mov	r4, r3
 8000cfe:	bb5c      	cbnz	r4, 8000d58 <_malloc_r+0x90>
 8000d00:	4629      	mov	r1, r5
 8000d02:	4638      	mov	r0, r7
 8000d04:	f7ff ffc0 	bl	8000c88 <sbrk_aligned>
 8000d08:	1c43      	adds	r3, r0, #1
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	d155      	bne.n	8000dba <_malloc_r+0xf2>
 8000d0e:	f8d8 4000 	ldr.w	r4, [r8]
 8000d12:	4626      	mov	r6, r4
 8000d14:	2e00      	cmp	r6, #0
 8000d16:	d145      	bne.n	8000da4 <_malloc_r+0xdc>
 8000d18:	2c00      	cmp	r4, #0
 8000d1a:	d048      	beq.n	8000dae <_malloc_r+0xe6>
 8000d1c:	6823      	ldr	r3, [r4, #0]
 8000d1e:	4631      	mov	r1, r6
 8000d20:	4638      	mov	r0, r7
 8000d22:	eb04 0903 	add.w	r9, r4, r3
 8000d26:	f000 fc73 	bl	8001610 <_sbrk_r>
 8000d2a:	4581      	cmp	r9, r0
 8000d2c:	d13f      	bne.n	8000dae <_malloc_r+0xe6>
 8000d2e:	6821      	ldr	r1, [r4, #0]
 8000d30:	1a6d      	subs	r5, r5, r1
 8000d32:	4629      	mov	r1, r5
 8000d34:	4638      	mov	r0, r7
 8000d36:	f7ff ffa7 	bl	8000c88 <sbrk_aligned>
 8000d3a:	3001      	adds	r0, #1
 8000d3c:	d037      	beq.n	8000dae <_malloc_r+0xe6>
 8000d3e:	6823      	ldr	r3, [r4, #0]
 8000d40:	442b      	add	r3, r5
 8000d42:	6023      	str	r3, [r4, #0]
 8000d44:	f8d8 3000 	ldr.w	r3, [r8]
 8000d48:	2b00      	cmp	r3, #0
 8000d4a:	d038      	beq.n	8000dbe <_malloc_r+0xf6>
 8000d4c:	685a      	ldr	r2, [r3, #4]
 8000d4e:	42a2      	cmp	r2, r4
 8000d50:	d12b      	bne.n	8000daa <_malloc_r+0xe2>
 8000d52:	2200      	movs	r2, #0
 8000d54:	605a      	str	r2, [r3, #4]
 8000d56:	e00f      	b.n	8000d78 <_malloc_r+0xb0>
 8000d58:	6822      	ldr	r2, [r4, #0]
 8000d5a:	1b52      	subs	r2, r2, r5
 8000d5c:	d41f      	bmi.n	8000d9e <_malloc_r+0xd6>
 8000d5e:	2a0b      	cmp	r2, #11
 8000d60:	d917      	bls.n	8000d92 <_malloc_r+0xca>
 8000d62:	1961      	adds	r1, r4, r5
 8000d64:	42a3      	cmp	r3, r4
 8000d66:	6025      	str	r5, [r4, #0]
 8000d68:	bf18      	it	ne
 8000d6a:	6059      	strne	r1, [r3, #4]
 8000d6c:	6863      	ldr	r3, [r4, #4]
 8000d6e:	bf08      	it	eq
 8000d70:	f8c8 1000 	streq.w	r1, [r8]
 8000d74:	5162      	str	r2, [r4, r5]
 8000d76:	604b      	str	r3, [r1, #4]
 8000d78:	4638      	mov	r0, r7
 8000d7a:	f104 060b 	add.w	r6, r4, #11
 8000d7e:	f000 f829 	bl	8000dd4 <__malloc_unlock>
 8000d82:	f026 0607 	bic.w	r6, r6, #7
 8000d86:	1d23      	adds	r3, r4, #4
 8000d88:	1af2      	subs	r2, r6, r3
 8000d8a:	d0ae      	beq.n	8000cea <_malloc_r+0x22>
 8000d8c:	1b9b      	subs	r3, r3, r6
 8000d8e:	50a3      	str	r3, [r4, r2]
 8000d90:	e7ab      	b.n	8000cea <_malloc_r+0x22>
 8000d92:	42a3      	cmp	r3, r4
 8000d94:	6862      	ldr	r2, [r4, #4]
 8000d96:	d1dd      	bne.n	8000d54 <_malloc_r+0x8c>
 8000d98:	f8c8 2000 	str.w	r2, [r8]
 8000d9c:	e7ec      	b.n	8000d78 <_malloc_r+0xb0>
 8000d9e:	4623      	mov	r3, r4
 8000da0:	6864      	ldr	r4, [r4, #4]
 8000da2:	e7ac      	b.n	8000cfe <_malloc_r+0x36>
 8000da4:	4634      	mov	r4, r6
 8000da6:	6876      	ldr	r6, [r6, #4]
 8000da8:	e7b4      	b.n	8000d14 <_malloc_r+0x4c>
 8000daa:	4613      	mov	r3, r2
 8000dac:	e7cc      	b.n	8000d48 <_malloc_r+0x80>
 8000dae:	230c      	movs	r3, #12
 8000db0:	603b      	str	r3, [r7, #0]
 8000db2:	4638      	mov	r0, r7
 8000db4:	f000 f80e 	bl	8000dd4 <__malloc_unlock>
 8000db8:	e797      	b.n	8000cea <_malloc_r+0x22>
 8000dba:	6025      	str	r5, [r4, #0]
 8000dbc:	e7dc      	b.n	8000d78 <_malloc_r+0xb0>
 8000dbe:	605b      	str	r3, [r3, #4]
 8000dc0:	deff      	udf	#255	; 0xff
 8000dc2:	bf00      	nop
 8000dc4:	2000069c 	.word	0x2000069c

08000dc8 <__malloc_lock>:
 8000dc8:	4801      	ldr	r0, [pc, #4]	; (8000dd0 <__malloc_lock+0x8>)
 8000dca:	f7ff bf0e 	b.w	8000bea <__retarget_lock_acquire_recursive>
 8000dce:	bf00      	nop
 8000dd0:	20000698 	.word	0x20000698

08000dd4 <__malloc_unlock>:
 8000dd4:	4801      	ldr	r0, [pc, #4]	; (8000ddc <__malloc_unlock+0x8>)
 8000dd6:	f7ff bf09 	b.w	8000bec <__retarget_lock_release_recursive>
 8000dda:	bf00      	nop
 8000ddc:	20000698 	.word	0x20000698

08000de0 <__sfputc_r>:
 8000de0:	6893      	ldr	r3, [r2, #8]
 8000de2:	3b01      	subs	r3, #1
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	b410      	push	{r4}
 8000de8:	6093      	str	r3, [r2, #8]
 8000dea:	da08      	bge.n	8000dfe <__sfputc_r+0x1e>
 8000dec:	6994      	ldr	r4, [r2, #24]
 8000dee:	42a3      	cmp	r3, r4
 8000df0:	db01      	blt.n	8000df6 <__sfputc_r+0x16>
 8000df2:	290a      	cmp	r1, #10
 8000df4:	d103      	bne.n	8000dfe <__sfputc_r+0x1e>
 8000df6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000dfa:	f000 bb73 	b.w	80014e4 <__swbuf_r>
 8000dfe:	6813      	ldr	r3, [r2, #0]
 8000e00:	1c58      	adds	r0, r3, #1
 8000e02:	6010      	str	r0, [r2, #0]
 8000e04:	7019      	strb	r1, [r3, #0]
 8000e06:	4608      	mov	r0, r1
 8000e08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8000e0c:	4770      	bx	lr

08000e0e <__sfputs_r>:
 8000e0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000e10:	4606      	mov	r6, r0
 8000e12:	460f      	mov	r7, r1
 8000e14:	4614      	mov	r4, r2
 8000e16:	18d5      	adds	r5, r2, r3
 8000e18:	42ac      	cmp	r4, r5
 8000e1a:	d101      	bne.n	8000e20 <__sfputs_r+0x12>
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	e007      	b.n	8000e30 <__sfputs_r+0x22>
 8000e20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000e24:	463a      	mov	r2, r7
 8000e26:	4630      	mov	r0, r6
 8000e28:	f7ff ffda 	bl	8000de0 <__sfputc_r>
 8000e2c:	1c43      	adds	r3, r0, #1
 8000e2e:	d1f3      	bne.n	8000e18 <__sfputs_r+0xa>
 8000e30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08000e34 <_vfiprintf_r>:
 8000e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000e38:	460d      	mov	r5, r1
 8000e3a:	b09d      	sub	sp, #116	; 0x74
 8000e3c:	4614      	mov	r4, r2
 8000e3e:	4698      	mov	r8, r3
 8000e40:	4606      	mov	r6, r0
 8000e42:	b118      	cbz	r0, 8000e4c <_vfiprintf_r+0x18>
 8000e44:	6a03      	ldr	r3, [r0, #32]
 8000e46:	b90b      	cbnz	r3, 8000e4c <_vfiprintf_r+0x18>
 8000e48:	f7ff fdca 	bl	80009e0 <__sinit>
 8000e4c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e4e:	07d9      	lsls	r1, r3, #31
 8000e50:	d405      	bmi.n	8000e5e <_vfiprintf_r+0x2a>
 8000e52:	89ab      	ldrh	r3, [r5, #12]
 8000e54:	059a      	lsls	r2, r3, #22
 8000e56:	d402      	bmi.n	8000e5e <_vfiprintf_r+0x2a>
 8000e58:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e5a:	f7ff fec6 	bl	8000bea <__retarget_lock_acquire_recursive>
 8000e5e:	89ab      	ldrh	r3, [r5, #12]
 8000e60:	071b      	lsls	r3, r3, #28
 8000e62:	d501      	bpl.n	8000e68 <_vfiprintf_r+0x34>
 8000e64:	692b      	ldr	r3, [r5, #16]
 8000e66:	b99b      	cbnz	r3, 8000e90 <_vfiprintf_r+0x5c>
 8000e68:	4629      	mov	r1, r5
 8000e6a:	4630      	mov	r0, r6
 8000e6c:	f000 fb78 	bl	8001560 <__swsetup_r>
 8000e70:	b170      	cbz	r0, 8000e90 <_vfiprintf_r+0x5c>
 8000e72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8000e74:	07dc      	lsls	r4, r3, #31
 8000e76:	d504      	bpl.n	8000e82 <_vfiprintf_r+0x4e>
 8000e78:	f04f 30ff 	mov.w	r0, #4294967295
 8000e7c:	b01d      	add	sp, #116	; 0x74
 8000e7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e82:	89ab      	ldrh	r3, [r5, #12]
 8000e84:	0598      	lsls	r0, r3, #22
 8000e86:	d4f7      	bmi.n	8000e78 <_vfiprintf_r+0x44>
 8000e88:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8000e8a:	f7ff feaf 	bl	8000bec <__retarget_lock_release_recursive>
 8000e8e:	e7f3      	b.n	8000e78 <_vfiprintf_r+0x44>
 8000e90:	2300      	movs	r3, #0
 8000e92:	9309      	str	r3, [sp, #36]	; 0x24
 8000e94:	2320      	movs	r3, #32
 8000e96:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8000e9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8000e9e:	2330      	movs	r3, #48	; 0x30
 8000ea0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8001054 <_vfiprintf_r+0x220>
 8000ea4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8000ea8:	f04f 0901 	mov.w	r9, #1
 8000eac:	4623      	mov	r3, r4
 8000eae:	469a      	mov	sl, r3
 8000eb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000eb4:	b10a      	cbz	r2, 8000eba <_vfiprintf_r+0x86>
 8000eb6:	2a25      	cmp	r2, #37	; 0x25
 8000eb8:	d1f9      	bne.n	8000eae <_vfiprintf_r+0x7a>
 8000eba:	ebba 0b04 	subs.w	fp, sl, r4
 8000ebe:	d00b      	beq.n	8000ed8 <_vfiprintf_r+0xa4>
 8000ec0:	465b      	mov	r3, fp
 8000ec2:	4622      	mov	r2, r4
 8000ec4:	4629      	mov	r1, r5
 8000ec6:	4630      	mov	r0, r6
 8000ec8:	f7ff ffa1 	bl	8000e0e <__sfputs_r>
 8000ecc:	3001      	adds	r0, #1
 8000ece:	f000 80a9 	beq.w	8001024 <_vfiprintf_r+0x1f0>
 8000ed2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000ed4:	445a      	add	r2, fp
 8000ed6:	9209      	str	r2, [sp, #36]	; 0x24
 8000ed8:	f89a 3000 	ldrb.w	r3, [sl]
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	f000 80a1 	beq.w	8001024 <_vfiprintf_r+0x1f0>
 8000ee2:	2300      	movs	r3, #0
 8000ee4:	f04f 32ff 	mov.w	r2, #4294967295
 8000ee8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8000eec:	f10a 0a01 	add.w	sl, sl, #1
 8000ef0:	9304      	str	r3, [sp, #16]
 8000ef2:	9307      	str	r3, [sp, #28]
 8000ef4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8000ef8:	931a      	str	r3, [sp, #104]	; 0x68
 8000efa:	4654      	mov	r4, sl
 8000efc:	2205      	movs	r2, #5
 8000efe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000f02:	4854      	ldr	r0, [pc, #336]	; (8001054 <_vfiprintf_r+0x220>)
 8000f04:	f7ff f96c 	bl	80001e0 <memchr>
 8000f08:	9a04      	ldr	r2, [sp, #16]
 8000f0a:	b9d8      	cbnz	r0, 8000f44 <_vfiprintf_r+0x110>
 8000f0c:	06d1      	lsls	r1, r2, #27
 8000f0e:	bf44      	itt	mi
 8000f10:	2320      	movmi	r3, #32
 8000f12:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000f16:	0713      	lsls	r3, r2, #28
 8000f18:	bf44      	itt	mi
 8000f1a:	232b      	movmi	r3, #43	; 0x2b
 8000f1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8000f20:	f89a 3000 	ldrb.w	r3, [sl]
 8000f24:	2b2a      	cmp	r3, #42	; 0x2a
 8000f26:	d015      	beq.n	8000f54 <_vfiprintf_r+0x120>
 8000f28:	9a07      	ldr	r2, [sp, #28]
 8000f2a:	4654      	mov	r4, sl
 8000f2c:	2000      	movs	r0, #0
 8000f2e:	f04f 0c0a 	mov.w	ip, #10
 8000f32:	4621      	mov	r1, r4
 8000f34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000f38:	3b30      	subs	r3, #48	; 0x30
 8000f3a:	2b09      	cmp	r3, #9
 8000f3c:	d94d      	bls.n	8000fda <_vfiprintf_r+0x1a6>
 8000f3e:	b1b0      	cbz	r0, 8000f6e <_vfiprintf_r+0x13a>
 8000f40:	9207      	str	r2, [sp, #28]
 8000f42:	e014      	b.n	8000f6e <_vfiprintf_r+0x13a>
 8000f44:	eba0 0308 	sub.w	r3, r0, r8
 8000f48:	fa09 f303 	lsl.w	r3, r9, r3
 8000f4c:	4313      	orrs	r3, r2
 8000f4e:	9304      	str	r3, [sp, #16]
 8000f50:	46a2      	mov	sl, r4
 8000f52:	e7d2      	b.n	8000efa <_vfiprintf_r+0xc6>
 8000f54:	9b03      	ldr	r3, [sp, #12]
 8000f56:	1d19      	adds	r1, r3, #4
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	9103      	str	r1, [sp, #12]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	bfbb      	ittet	lt
 8000f60:	425b      	neglt	r3, r3
 8000f62:	f042 0202 	orrlt.w	r2, r2, #2
 8000f66:	9307      	strge	r3, [sp, #28]
 8000f68:	9307      	strlt	r3, [sp, #28]
 8000f6a:	bfb8      	it	lt
 8000f6c:	9204      	strlt	r2, [sp, #16]
 8000f6e:	7823      	ldrb	r3, [r4, #0]
 8000f70:	2b2e      	cmp	r3, #46	; 0x2e
 8000f72:	d10c      	bne.n	8000f8e <_vfiprintf_r+0x15a>
 8000f74:	7863      	ldrb	r3, [r4, #1]
 8000f76:	2b2a      	cmp	r3, #42	; 0x2a
 8000f78:	d134      	bne.n	8000fe4 <_vfiprintf_r+0x1b0>
 8000f7a:	9b03      	ldr	r3, [sp, #12]
 8000f7c:	1d1a      	adds	r2, r3, #4
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	9203      	str	r2, [sp, #12]
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	bfb8      	it	lt
 8000f86:	f04f 33ff 	movlt.w	r3, #4294967295
 8000f8a:	3402      	adds	r4, #2
 8000f8c:	9305      	str	r3, [sp, #20]
 8000f8e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8001064 <_vfiprintf_r+0x230>
 8000f92:	7821      	ldrb	r1, [r4, #0]
 8000f94:	2203      	movs	r2, #3
 8000f96:	4650      	mov	r0, sl
 8000f98:	f7ff f922 	bl	80001e0 <memchr>
 8000f9c:	b138      	cbz	r0, 8000fae <_vfiprintf_r+0x17a>
 8000f9e:	9b04      	ldr	r3, [sp, #16]
 8000fa0:	eba0 000a 	sub.w	r0, r0, sl
 8000fa4:	2240      	movs	r2, #64	; 0x40
 8000fa6:	4082      	lsls	r2, r0
 8000fa8:	4313      	orrs	r3, r2
 8000faa:	3401      	adds	r4, #1
 8000fac:	9304      	str	r3, [sp, #16]
 8000fae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8000fb2:	4829      	ldr	r0, [pc, #164]	; (8001058 <_vfiprintf_r+0x224>)
 8000fb4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8000fb8:	2206      	movs	r2, #6
 8000fba:	f7ff f911 	bl	80001e0 <memchr>
 8000fbe:	2800      	cmp	r0, #0
 8000fc0:	d03f      	beq.n	8001042 <_vfiprintf_r+0x20e>
 8000fc2:	4b26      	ldr	r3, [pc, #152]	; (800105c <_vfiprintf_r+0x228>)
 8000fc4:	bb1b      	cbnz	r3, 800100e <_vfiprintf_r+0x1da>
 8000fc6:	9b03      	ldr	r3, [sp, #12]
 8000fc8:	3307      	adds	r3, #7
 8000fca:	f023 0307 	bic.w	r3, r3, #7
 8000fce:	3308      	adds	r3, #8
 8000fd0:	9303      	str	r3, [sp, #12]
 8000fd2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000fd4:	443b      	add	r3, r7
 8000fd6:	9309      	str	r3, [sp, #36]	; 0x24
 8000fd8:	e768      	b.n	8000eac <_vfiprintf_r+0x78>
 8000fda:	fb0c 3202 	mla	r2, ip, r2, r3
 8000fde:	460c      	mov	r4, r1
 8000fe0:	2001      	movs	r0, #1
 8000fe2:	e7a6      	b.n	8000f32 <_vfiprintf_r+0xfe>
 8000fe4:	2300      	movs	r3, #0
 8000fe6:	3401      	adds	r4, #1
 8000fe8:	9305      	str	r3, [sp, #20]
 8000fea:	4619      	mov	r1, r3
 8000fec:	f04f 0c0a 	mov.w	ip, #10
 8000ff0:	4620      	mov	r0, r4
 8000ff2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000ff6:	3a30      	subs	r2, #48	; 0x30
 8000ff8:	2a09      	cmp	r2, #9
 8000ffa:	d903      	bls.n	8001004 <_vfiprintf_r+0x1d0>
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d0c6      	beq.n	8000f8e <_vfiprintf_r+0x15a>
 8001000:	9105      	str	r1, [sp, #20]
 8001002:	e7c4      	b.n	8000f8e <_vfiprintf_r+0x15a>
 8001004:	fb0c 2101 	mla	r1, ip, r1, r2
 8001008:	4604      	mov	r4, r0
 800100a:	2301      	movs	r3, #1
 800100c:	e7f0      	b.n	8000ff0 <_vfiprintf_r+0x1bc>
 800100e:	ab03      	add	r3, sp, #12
 8001010:	9300      	str	r3, [sp, #0]
 8001012:	462a      	mov	r2, r5
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <_vfiprintf_r+0x22c>)
 8001016:	a904      	add	r1, sp, #16
 8001018:	4630      	mov	r0, r6
 800101a:	f3af 8000 	nop.w
 800101e:	4607      	mov	r7, r0
 8001020:	1c78      	adds	r0, r7, #1
 8001022:	d1d6      	bne.n	8000fd2 <_vfiprintf_r+0x19e>
 8001024:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8001026:	07d9      	lsls	r1, r3, #31
 8001028:	d405      	bmi.n	8001036 <_vfiprintf_r+0x202>
 800102a:	89ab      	ldrh	r3, [r5, #12]
 800102c:	059a      	lsls	r2, r3, #22
 800102e:	d402      	bmi.n	8001036 <_vfiprintf_r+0x202>
 8001030:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8001032:	f7ff fddb 	bl	8000bec <__retarget_lock_release_recursive>
 8001036:	89ab      	ldrh	r3, [r5, #12]
 8001038:	065b      	lsls	r3, r3, #25
 800103a:	f53f af1d 	bmi.w	8000e78 <_vfiprintf_r+0x44>
 800103e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8001040:	e71c      	b.n	8000e7c <_vfiprintf_r+0x48>
 8001042:	ab03      	add	r3, sp, #12
 8001044:	9300      	str	r3, [sp, #0]
 8001046:	462a      	mov	r2, r5
 8001048:	4b05      	ldr	r3, [pc, #20]	; (8001060 <_vfiprintf_r+0x22c>)
 800104a:	a904      	add	r1, sp, #16
 800104c:	4630      	mov	r0, r6
 800104e:	f000 f879 	bl	8001144 <_printf_i>
 8001052:	e7e4      	b.n	800101e <_vfiprintf_r+0x1ea>
 8001054:	080017a8 	.word	0x080017a8
 8001058:	080017b2 	.word	0x080017b2
 800105c:	00000000 	.word	0x00000000
 8001060:	08000e0f 	.word	0x08000e0f
 8001064:	080017ae 	.word	0x080017ae

08001068 <_printf_common>:
 8001068:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800106c:	4616      	mov	r6, r2
 800106e:	4699      	mov	r9, r3
 8001070:	688a      	ldr	r2, [r1, #8]
 8001072:	690b      	ldr	r3, [r1, #16]
 8001074:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001078:	4293      	cmp	r3, r2
 800107a:	bfb8      	it	lt
 800107c:	4613      	movlt	r3, r2
 800107e:	6033      	str	r3, [r6, #0]
 8001080:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8001084:	4607      	mov	r7, r0
 8001086:	460c      	mov	r4, r1
 8001088:	b10a      	cbz	r2, 800108e <_printf_common+0x26>
 800108a:	3301      	adds	r3, #1
 800108c:	6033      	str	r3, [r6, #0]
 800108e:	6823      	ldr	r3, [r4, #0]
 8001090:	0699      	lsls	r1, r3, #26
 8001092:	bf42      	ittt	mi
 8001094:	6833      	ldrmi	r3, [r6, #0]
 8001096:	3302      	addmi	r3, #2
 8001098:	6033      	strmi	r3, [r6, #0]
 800109a:	6825      	ldr	r5, [r4, #0]
 800109c:	f015 0506 	ands.w	r5, r5, #6
 80010a0:	d106      	bne.n	80010b0 <_printf_common+0x48>
 80010a2:	f104 0a19 	add.w	sl, r4, #25
 80010a6:	68e3      	ldr	r3, [r4, #12]
 80010a8:	6832      	ldr	r2, [r6, #0]
 80010aa:	1a9b      	subs	r3, r3, r2
 80010ac:	42ab      	cmp	r3, r5
 80010ae:	dc26      	bgt.n	80010fe <_printf_common+0x96>
 80010b0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80010b4:	1e13      	subs	r3, r2, #0
 80010b6:	6822      	ldr	r2, [r4, #0]
 80010b8:	bf18      	it	ne
 80010ba:	2301      	movne	r3, #1
 80010bc:	0692      	lsls	r2, r2, #26
 80010be:	d42b      	bmi.n	8001118 <_printf_common+0xb0>
 80010c0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80010c4:	4649      	mov	r1, r9
 80010c6:	4638      	mov	r0, r7
 80010c8:	47c0      	blx	r8
 80010ca:	3001      	adds	r0, #1
 80010cc:	d01e      	beq.n	800110c <_printf_common+0xa4>
 80010ce:	6823      	ldr	r3, [r4, #0]
 80010d0:	6922      	ldr	r2, [r4, #16]
 80010d2:	f003 0306 	and.w	r3, r3, #6
 80010d6:	2b04      	cmp	r3, #4
 80010d8:	bf02      	ittt	eq
 80010da:	68e5      	ldreq	r5, [r4, #12]
 80010dc:	6833      	ldreq	r3, [r6, #0]
 80010de:	1aed      	subeq	r5, r5, r3
 80010e0:	68a3      	ldr	r3, [r4, #8]
 80010e2:	bf0c      	ite	eq
 80010e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80010e8:	2500      	movne	r5, #0
 80010ea:	4293      	cmp	r3, r2
 80010ec:	bfc4      	itt	gt
 80010ee:	1a9b      	subgt	r3, r3, r2
 80010f0:	18ed      	addgt	r5, r5, r3
 80010f2:	2600      	movs	r6, #0
 80010f4:	341a      	adds	r4, #26
 80010f6:	42b5      	cmp	r5, r6
 80010f8:	d11a      	bne.n	8001130 <_printf_common+0xc8>
 80010fa:	2000      	movs	r0, #0
 80010fc:	e008      	b.n	8001110 <_printf_common+0xa8>
 80010fe:	2301      	movs	r3, #1
 8001100:	4652      	mov	r2, sl
 8001102:	4649      	mov	r1, r9
 8001104:	4638      	mov	r0, r7
 8001106:	47c0      	blx	r8
 8001108:	3001      	adds	r0, #1
 800110a:	d103      	bne.n	8001114 <_printf_common+0xac>
 800110c:	f04f 30ff 	mov.w	r0, #4294967295
 8001110:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8001114:	3501      	adds	r5, #1
 8001116:	e7c6      	b.n	80010a6 <_printf_common+0x3e>
 8001118:	18e1      	adds	r1, r4, r3
 800111a:	1c5a      	adds	r2, r3, #1
 800111c:	2030      	movs	r0, #48	; 0x30
 800111e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8001122:	4422      	add	r2, r4
 8001124:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8001128:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800112c:	3302      	adds	r3, #2
 800112e:	e7c7      	b.n	80010c0 <_printf_common+0x58>
 8001130:	2301      	movs	r3, #1
 8001132:	4622      	mov	r2, r4
 8001134:	4649      	mov	r1, r9
 8001136:	4638      	mov	r0, r7
 8001138:	47c0      	blx	r8
 800113a:	3001      	adds	r0, #1
 800113c:	d0e6      	beq.n	800110c <_printf_common+0xa4>
 800113e:	3601      	adds	r6, #1
 8001140:	e7d9      	b.n	80010f6 <_printf_common+0x8e>
	...

08001144 <_printf_i>:
 8001144:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8001148:	7e0f      	ldrb	r7, [r1, #24]
 800114a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800114c:	2f78      	cmp	r7, #120	; 0x78
 800114e:	4691      	mov	r9, r2
 8001150:	4680      	mov	r8, r0
 8001152:	460c      	mov	r4, r1
 8001154:	469a      	mov	sl, r3
 8001156:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800115a:	d807      	bhi.n	800116c <_printf_i+0x28>
 800115c:	2f62      	cmp	r7, #98	; 0x62
 800115e:	d80a      	bhi.n	8001176 <_printf_i+0x32>
 8001160:	2f00      	cmp	r7, #0
 8001162:	f000 80d4 	beq.w	800130e <_printf_i+0x1ca>
 8001166:	2f58      	cmp	r7, #88	; 0x58
 8001168:	f000 80c0 	beq.w	80012ec <_printf_i+0x1a8>
 800116c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8001170:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8001174:	e03a      	b.n	80011ec <_printf_i+0xa8>
 8001176:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800117a:	2b15      	cmp	r3, #21
 800117c:	d8f6      	bhi.n	800116c <_printf_i+0x28>
 800117e:	a101      	add	r1, pc, #4	; (adr r1, 8001184 <_printf_i+0x40>)
 8001180:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8001184:	080011dd 	.word	0x080011dd
 8001188:	080011f1 	.word	0x080011f1
 800118c:	0800116d 	.word	0x0800116d
 8001190:	0800116d 	.word	0x0800116d
 8001194:	0800116d 	.word	0x0800116d
 8001198:	0800116d 	.word	0x0800116d
 800119c:	080011f1 	.word	0x080011f1
 80011a0:	0800116d 	.word	0x0800116d
 80011a4:	0800116d 	.word	0x0800116d
 80011a8:	0800116d 	.word	0x0800116d
 80011ac:	0800116d 	.word	0x0800116d
 80011b0:	080012f5 	.word	0x080012f5
 80011b4:	0800121d 	.word	0x0800121d
 80011b8:	080012af 	.word	0x080012af
 80011bc:	0800116d 	.word	0x0800116d
 80011c0:	0800116d 	.word	0x0800116d
 80011c4:	08001317 	.word	0x08001317
 80011c8:	0800116d 	.word	0x0800116d
 80011cc:	0800121d 	.word	0x0800121d
 80011d0:	0800116d 	.word	0x0800116d
 80011d4:	0800116d 	.word	0x0800116d
 80011d8:	080012b7 	.word	0x080012b7
 80011dc:	682b      	ldr	r3, [r5, #0]
 80011de:	1d1a      	adds	r2, r3, #4
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	602a      	str	r2, [r5, #0]
 80011e4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80011e8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80011ec:	2301      	movs	r3, #1
 80011ee:	e09f      	b.n	8001330 <_printf_i+0x1ec>
 80011f0:	6820      	ldr	r0, [r4, #0]
 80011f2:	682b      	ldr	r3, [r5, #0]
 80011f4:	0607      	lsls	r7, r0, #24
 80011f6:	f103 0104 	add.w	r1, r3, #4
 80011fa:	6029      	str	r1, [r5, #0]
 80011fc:	d501      	bpl.n	8001202 <_printf_i+0xbe>
 80011fe:	681e      	ldr	r6, [r3, #0]
 8001200:	e003      	b.n	800120a <_printf_i+0xc6>
 8001202:	0646      	lsls	r6, r0, #25
 8001204:	d5fb      	bpl.n	80011fe <_printf_i+0xba>
 8001206:	f9b3 6000 	ldrsh.w	r6, [r3]
 800120a:	2e00      	cmp	r6, #0
 800120c:	da03      	bge.n	8001216 <_printf_i+0xd2>
 800120e:	232d      	movs	r3, #45	; 0x2d
 8001210:	4276      	negs	r6, r6
 8001212:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001216:	485a      	ldr	r0, [pc, #360]	; (8001380 <_printf_i+0x23c>)
 8001218:	230a      	movs	r3, #10
 800121a:	e012      	b.n	8001242 <_printf_i+0xfe>
 800121c:	682b      	ldr	r3, [r5, #0]
 800121e:	6820      	ldr	r0, [r4, #0]
 8001220:	1d19      	adds	r1, r3, #4
 8001222:	6029      	str	r1, [r5, #0]
 8001224:	0605      	lsls	r5, r0, #24
 8001226:	d501      	bpl.n	800122c <_printf_i+0xe8>
 8001228:	681e      	ldr	r6, [r3, #0]
 800122a:	e002      	b.n	8001232 <_printf_i+0xee>
 800122c:	0641      	lsls	r1, r0, #25
 800122e:	d5fb      	bpl.n	8001228 <_printf_i+0xe4>
 8001230:	881e      	ldrh	r6, [r3, #0]
 8001232:	4853      	ldr	r0, [pc, #332]	; (8001380 <_printf_i+0x23c>)
 8001234:	2f6f      	cmp	r7, #111	; 0x6f
 8001236:	bf0c      	ite	eq
 8001238:	2308      	moveq	r3, #8
 800123a:	230a      	movne	r3, #10
 800123c:	2100      	movs	r1, #0
 800123e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8001242:	6865      	ldr	r5, [r4, #4]
 8001244:	60a5      	str	r5, [r4, #8]
 8001246:	2d00      	cmp	r5, #0
 8001248:	bfa2      	ittt	ge
 800124a:	6821      	ldrge	r1, [r4, #0]
 800124c:	f021 0104 	bicge.w	r1, r1, #4
 8001250:	6021      	strge	r1, [r4, #0]
 8001252:	b90e      	cbnz	r6, 8001258 <_printf_i+0x114>
 8001254:	2d00      	cmp	r5, #0
 8001256:	d04b      	beq.n	80012f0 <_printf_i+0x1ac>
 8001258:	4615      	mov	r5, r2
 800125a:	fbb6 f1f3 	udiv	r1, r6, r3
 800125e:	fb03 6711 	mls	r7, r3, r1, r6
 8001262:	5dc7      	ldrb	r7, [r0, r7]
 8001264:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8001268:	4637      	mov	r7, r6
 800126a:	42bb      	cmp	r3, r7
 800126c:	460e      	mov	r6, r1
 800126e:	d9f4      	bls.n	800125a <_printf_i+0x116>
 8001270:	2b08      	cmp	r3, #8
 8001272:	d10b      	bne.n	800128c <_printf_i+0x148>
 8001274:	6823      	ldr	r3, [r4, #0]
 8001276:	07de      	lsls	r6, r3, #31
 8001278:	d508      	bpl.n	800128c <_printf_i+0x148>
 800127a:	6923      	ldr	r3, [r4, #16]
 800127c:	6861      	ldr	r1, [r4, #4]
 800127e:	4299      	cmp	r1, r3
 8001280:	bfde      	ittt	le
 8001282:	2330      	movle	r3, #48	; 0x30
 8001284:	f805 3c01 	strble.w	r3, [r5, #-1]
 8001288:	f105 35ff 	addle.w	r5, r5, #4294967295
 800128c:	1b52      	subs	r2, r2, r5
 800128e:	6122      	str	r2, [r4, #16]
 8001290:	f8cd a000 	str.w	sl, [sp]
 8001294:	464b      	mov	r3, r9
 8001296:	aa03      	add	r2, sp, #12
 8001298:	4621      	mov	r1, r4
 800129a:	4640      	mov	r0, r8
 800129c:	f7ff fee4 	bl	8001068 <_printf_common>
 80012a0:	3001      	adds	r0, #1
 80012a2:	d14a      	bne.n	800133a <_printf_i+0x1f6>
 80012a4:	f04f 30ff 	mov.w	r0, #4294967295
 80012a8:	b004      	add	sp, #16
 80012aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80012ae:	6823      	ldr	r3, [r4, #0]
 80012b0:	f043 0320 	orr.w	r3, r3, #32
 80012b4:	6023      	str	r3, [r4, #0]
 80012b6:	4833      	ldr	r0, [pc, #204]	; (8001384 <_printf_i+0x240>)
 80012b8:	2778      	movs	r7, #120	; 0x78
 80012ba:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80012be:	6823      	ldr	r3, [r4, #0]
 80012c0:	6829      	ldr	r1, [r5, #0]
 80012c2:	061f      	lsls	r7, r3, #24
 80012c4:	f851 6b04 	ldr.w	r6, [r1], #4
 80012c8:	d402      	bmi.n	80012d0 <_printf_i+0x18c>
 80012ca:	065f      	lsls	r7, r3, #25
 80012cc:	bf48      	it	mi
 80012ce:	b2b6      	uxthmi	r6, r6
 80012d0:	07df      	lsls	r7, r3, #31
 80012d2:	bf48      	it	mi
 80012d4:	f043 0320 	orrmi.w	r3, r3, #32
 80012d8:	6029      	str	r1, [r5, #0]
 80012da:	bf48      	it	mi
 80012dc:	6023      	strmi	r3, [r4, #0]
 80012de:	b91e      	cbnz	r6, 80012e8 <_printf_i+0x1a4>
 80012e0:	6823      	ldr	r3, [r4, #0]
 80012e2:	f023 0320 	bic.w	r3, r3, #32
 80012e6:	6023      	str	r3, [r4, #0]
 80012e8:	2310      	movs	r3, #16
 80012ea:	e7a7      	b.n	800123c <_printf_i+0xf8>
 80012ec:	4824      	ldr	r0, [pc, #144]	; (8001380 <_printf_i+0x23c>)
 80012ee:	e7e4      	b.n	80012ba <_printf_i+0x176>
 80012f0:	4615      	mov	r5, r2
 80012f2:	e7bd      	b.n	8001270 <_printf_i+0x12c>
 80012f4:	682b      	ldr	r3, [r5, #0]
 80012f6:	6826      	ldr	r6, [r4, #0]
 80012f8:	6961      	ldr	r1, [r4, #20]
 80012fa:	1d18      	adds	r0, r3, #4
 80012fc:	6028      	str	r0, [r5, #0]
 80012fe:	0635      	lsls	r5, r6, #24
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	d501      	bpl.n	8001308 <_printf_i+0x1c4>
 8001304:	6019      	str	r1, [r3, #0]
 8001306:	e002      	b.n	800130e <_printf_i+0x1ca>
 8001308:	0670      	lsls	r0, r6, #25
 800130a:	d5fb      	bpl.n	8001304 <_printf_i+0x1c0>
 800130c:	8019      	strh	r1, [r3, #0]
 800130e:	2300      	movs	r3, #0
 8001310:	6123      	str	r3, [r4, #16]
 8001312:	4615      	mov	r5, r2
 8001314:	e7bc      	b.n	8001290 <_printf_i+0x14c>
 8001316:	682b      	ldr	r3, [r5, #0]
 8001318:	1d1a      	adds	r2, r3, #4
 800131a:	602a      	str	r2, [r5, #0]
 800131c:	681d      	ldr	r5, [r3, #0]
 800131e:	6862      	ldr	r2, [r4, #4]
 8001320:	2100      	movs	r1, #0
 8001322:	4628      	mov	r0, r5
 8001324:	f7fe ff5c 	bl	80001e0 <memchr>
 8001328:	b108      	cbz	r0, 800132e <_printf_i+0x1ea>
 800132a:	1b40      	subs	r0, r0, r5
 800132c:	6060      	str	r0, [r4, #4]
 800132e:	6863      	ldr	r3, [r4, #4]
 8001330:	6123      	str	r3, [r4, #16]
 8001332:	2300      	movs	r3, #0
 8001334:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8001338:	e7aa      	b.n	8001290 <_printf_i+0x14c>
 800133a:	6923      	ldr	r3, [r4, #16]
 800133c:	462a      	mov	r2, r5
 800133e:	4649      	mov	r1, r9
 8001340:	4640      	mov	r0, r8
 8001342:	47d0      	blx	sl
 8001344:	3001      	adds	r0, #1
 8001346:	d0ad      	beq.n	80012a4 <_printf_i+0x160>
 8001348:	6823      	ldr	r3, [r4, #0]
 800134a:	079b      	lsls	r3, r3, #30
 800134c:	d413      	bmi.n	8001376 <_printf_i+0x232>
 800134e:	68e0      	ldr	r0, [r4, #12]
 8001350:	9b03      	ldr	r3, [sp, #12]
 8001352:	4298      	cmp	r0, r3
 8001354:	bfb8      	it	lt
 8001356:	4618      	movlt	r0, r3
 8001358:	e7a6      	b.n	80012a8 <_printf_i+0x164>
 800135a:	2301      	movs	r3, #1
 800135c:	4632      	mov	r2, r6
 800135e:	4649      	mov	r1, r9
 8001360:	4640      	mov	r0, r8
 8001362:	47d0      	blx	sl
 8001364:	3001      	adds	r0, #1
 8001366:	d09d      	beq.n	80012a4 <_printf_i+0x160>
 8001368:	3501      	adds	r5, #1
 800136a:	68e3      	ldr	r3, [r4, #12]
 800136c:	9903      	ldr	r1, [sp, #12]
 800136e:	1a5b      	subs	r3, r3, r1
 8001370:	42ab      	cmp	r3, r5
 8001372:	dcf2      	bgt.n	800135a <_printf_i+0x216>
 8001374:	e7eb      	b.n	800134e <_printf_i+0x20a>
 8001376:	2500      	movs	r5, #0
 8001378:	f104 0619 	add.w	r6, r4, #25
 800137c:	e7f5      	b.n	800136a <_printf_i+0x226>
 800137e:	bf00      	nop
 8001380:	080017b9 	.word	0x080017b9
 8001384:	080017ca 	.word	0x080017ca

08001388 <__sflush_r>:
 8001388:	898a      	ldrh	r2, [r1, #12]
 800138a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800138e:	4605      	mov	r5, r0
 8001390:	0710      	lsls	r0, r2, #28
 8001392:	460c      	mov	r4, r1
 8001394:	d458      	bmi.n	8001448 <__sflush_r+0xc0>
 8001396:	684b      	ldr	r3, [r1, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	dc05      	bgt.n	80013a8 <__sflush_r+0x20>
 800139c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800139e:	2b00      	cmp	r3, #0
 80013a0:	dc02      	bgt.n	80013a8 <__sflush_r+0x20>
 80013a2:	2000      	movs	r0, #0
 80013a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80013a8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80013aa:	2e00      	cmp	r6, #0
 80013ac:	d0f9      	beq.n	80013a2 <__sflush_r+0x1a>
 80013ae:	2300      	movs	r3, #0
 80013b0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80013b4:	682f      	ldr	r7, [r5, #0]
 80013b6:	6a21      	ldr	r1, [r4, #32]
 80013b8:	602b      	str	r3, [r5, #0]
 80013ba:	d032      	beq.n	8001422 <__sflush_r+0x9a>
 80013bc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80013be:	89a3      	ldrh	r3, [r4, #12]
 80013c0:	075a      	lsls	r2, r3, #29
 80013c2:	d505      	bpl.n	80013d0 <__sflush_r+0x48>
 80013c4:	6863      	ldr	r3, [r4, #4]
 80013c6:	1ac0      	subs	r0, r0, r3
 80013c8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80013ca:	b10b      	cbz	r3, 80013d0 <__sflush_r+0x48>
 80013cc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80013ce:	1ac0      	subs	r0, r0, r3
 80013d0:	2300      	movs	r3, #0
 80013d2:	4602      	mov	r2, r0
 80013d4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80013d6:	6a21      	ldr	r1, [r4, #32]
 80013d8:	4628      	mov	r0, r5
 80013da:	47b0      	blx	r6
 80013dc:	1c43      	adds	r3, r0, #1
 80013de:	89a3      	ldrh	r3, [r4, #12]
 80013e0:	d106      	bne.n	80013f0 <__sflush_r+0x68>
 80013e2:	6829      	ldr	r1, [r5, #0]
 80013e4:	291d      	cmp	r1, #29
 80013e6:	d82b      	bhi.n	8001440 <__sflush_r+0xb8>
 80013e8:	4a29      	ldr	r2, [pc, #164]	; (8001490 <__sflush_r+0x108>)
 80013ea:	410a      	asrs	r2, r1
 80013ec:	07d6      	lsls	r6, r2, #31
 80013ee:	d427      	bmi.n	8001440 <__sflush_r+0xb8>
 80013f0:	2200      	movs	r2, #0
 80013f2:	6062      	str	r2, [r4, #4]
 80013f4:	04d9      	lsls	r1, r3, #19
 80013f6:	6922      	ldr	r2, [r4, #16]
 80013f8:	6022      	str	r2, [r4, #0]
 80013fa:	d504      	bpl.n	8001406 <__sflush_r+0x7e>
 80013fc:	1c42      	adds	r2, r0, #1
 80013fe:	d101      	bne.n	8001404 <__sflush_r+0x7c>
 8001400:	682b      	ldr	r3, [r5, #0]
 8001402:	b903      	cbnz	r3, 8001406 <__sflush_r+0x7e>
 8001404:	6560      	str	r0, [r4, #84]	; 0x54
 8001406:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001408:	602f      	str	r7, [r5, #0]
 800140a:	2900      	cmp	r1, #0
 800140c:	d0c9      	beq.n	80013a2 <__sflush_r+0x1a>
 800140e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8001412:	4299      	cmp	r1, r3
 8001414:	d002      	beq.n	800141c <__sflush_r+0x94>
 8001416:	4628      	mov	r0, r5
 8001418:	f7ff fbea 	bl	8000bf0 <_free_r>
 800141c:	2000      	movs	r0, #0
 800141e:	6360      	str	r0, [r4, #52]	; 0x34
 8001420:	e7c0      	b.n	80013a4 <__sflush_r+0x1c>
 8001422:	2301      	movs	r3, #1
 8001424:	4628      	mov	r0, r5
 8001426:	47b0      	blx	r6
 8001428:	1c41      	adds	r1, r0, #1
 800142a:	d1c8      	bne.n	80013be <__sflush_r+0x36>
 800142c:	682b      	ldr	r3, [r5, #0]
 800142e:	2b00      	cmp	r3, #0
 8001430:	d0c5      	beq.n	80013be <__sflush_r+0x36>
 8001432:	2b1d      	cmp	r3, #29
 8001434:	d001      	beq.n	800143a <__sflush_r+0xb2>
 8001436:	2b16      	cmp	r3, #22
 8001438:	d101      	bne.n	800143e <__sflush_r+0xb6>
 800143a:	602f      	str	r7, [r5, #0]
 800143c:	e7b1      	b.n	80013a2 <__sflush_r+0x1a>
 800143e:	89a3      	ldrh	r3, [r4, #12]
 8001440:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8001444:	81a3      	strh	r3, [r4, #12]
 8001446:	e7ad      	b.n	80013a4 <__sflush_r+0x1c>
 8001448:	690f      	ldr	r7, [r1, #16]
 800144a:	2f00      	cmp	r7, #0
 800144c:	d0a9      	beq.n	80013a2 <__sflush_r+0x1a>
 800144e:	0793      	lsls	r3, r2, #30
 8001450:	680e      	ldr	r6, [r1, #0]
 8001452:	bf08      	it	eq
 8001454:	694b      	ldreq	r3, [r1, #20]
 8001456:	600f      	str	r7, [r1, #0]
 8001458:	bf18      	it	ne
 800145a:	2300      	movne	r3, #0
 800145c:	eba6 0807 	sub.w	r8, r6, r7
 8001460:	608b      	str	r3, [r1, #8]
 8001462:	f1b8 0f00 	cmp.w	r8, #0
 8001466:	dd9c      	ble.n	80013a2 <__sflush_r+0x1a>
 8001468:	6a21      	ldr	r1, [r4, #32]
 800146a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800146c:	4643      	mov	r3, r8
 800146e:	463a      	mov	r2, r7
 8001470:	4628      	mov	r0, r5
 8001472:	47b0      	blx	r6
 8001474:	2800      	cmp	r0, #0
 8001476:	dc06      	bgt.n	8001486 <__sflush_r+0xfe>
 8001478:	89a3      	ldrh	r3, [r4, #12]
 800147a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800147e:	81a3      	strh	r3, [r4, #12]
 8001480:	f04f 30ff 	mov.w	r0, #4294967295
 8001484:	e78e      	b.n	80013a4 <__sflush_r+0x1c>
 8001486:	4407      	add	r7, r0
 8001488:	eba8 0800 	sub.w	r8, r8, r0
 800148c:	e7e9      	b.n	8001462 <__sflush_r+0xda>
 800148e:	bf00      	nop
 8001490:	dfbffffe 	.word	0xdfbffffe

08001494 <_fflush_r>:
 8001494:	b538      	push	{r3, r4, r5, lr}
 8001496:	690b      	ldr	r3, [r1, #16]
 8001498:	4605      	mov	r5, r0
 800149a:	460c      	mov	r4, r1
 800149c:	b913      	cbnz	r3, 80014a4 <_fflush_r+0x10>
 800149e:	2500      	movs	r5, #0
 80014a0:	4628      	mov	r0, r5
 80014a2:	bd38      	pop	{r3, r4, r5, pc}
 80014a4:	b118      	cbz	r0, 80014ae <_fflush_r+0x1a>
 80014a6:	6a03      	ldr	r3, [r0, #32]
 80014a8:	b90b      	cbnz	r3, 80014ae <_fflush_r+0x1a>
 80014aa:	f7ff fa99 	bl	80009e0 <__sinit>
 80014ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d0f3      	beq.n	800149e <_fflush_r+0xa>
 80014b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80014b8:	07d0      	lsls	r0, r2, #31
 80014ba:	d404      	bmi.n	80014c6 <_fflush_r+0x32>
 80014bc:	0599      	lsls	r1, r3, #22
 80014be:	d402      	bmi.n	80014c6 <_fflush_r+0x32>
 80014c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014c2:	f7ff fb92 	bl	8000bea <__retarget_lock_acquire_recursive>
 80014c6:	4628      	mov	r0, r5
 80014c8:	4621      	mov	r1, r4
 80014ca:	f7ff ff5d 	bl	8001388 <__sflush_r>
 80014ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80014d0:	07da      	lsls	r2, r3, #31
 80014d2:	4605      	mov	r5, r0
 80014d4:	d4e4      	bmi.n	80014a0 <_fflush_r+0xc>
 80014d6:	89a3      	ldrh	r3, [r4, #12]
 80014d8:	059b      	lsls	r3, r3, #22
 80014da:	d4e1      	bmi.n	80014a0 <_fflush_r+0xc>
 80014dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80014de:	f7ff fb85 	bl	8000bec <__retarget_lock_release_recursive>
 80014e2:	e7dd      	b.n	80014a0 <_fflush_r+0xc>

080014e4 <__swbuf_r>:
 80014e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80014e6:	460e      	mov	r6, r1
 80014e8:	4614      	mov	r4, r2
 80014ea:	4605      	mov	r5, r0
 80014ec:	b118      	cbz	r0, 80014f6 <__swbuf_r+0x12>
 80014ee:	6a03      	ldr	r3, [r0, #32]
 80014f0:	b90b      	cbnz	r3, 80014f6 <__swbuf_r+0x12>
 80014f2:	f7ff fa75 	bl	80009e0 <__sinit>
 80014f6:	69a3      	ldr	r3, [r4, #24]
 80014f8:	60a3      	str	r3, [r4, #8]
 80014fa:	89a3      	ldrh	r3, [r4, #12]
 80014fc:	071a      	lsls	r2, r3, #28
 80014fe:	d525      	bpl.n	800154c <__swbuf_r+0x68>
 8001500:	6923      	ldr	r3, [r4, #16]
 8001502:	b31b      	cbz	r3, 800154c <__swbuf_r+0x68>
 8001504:	6823      	ldr	r3, [r4, #0]
 8001506:	6922      	ldr	r2, [r4, #16]
 8001508:	1a98      	subs	r0, r3, r2
 800150a:	6963      	ldr	r3, [r4, #20]
 800150c:	b2f6      	uxtb	r6, r6
 800150e:	4283      	cmp	r3, r0
 8001510:	4637      	mov	r7, r6
 8001512:	dc04      	bgt.n	800151e <__swbuf_r+0x3a>
 8001514:	4621      	mov	r1, r4
 8001516:	4628      	mov	r0, r5
 8001518:	f7ff ffbc 	bl	8001494 <_fflush_r>
 800151c:	b9e0      	cbnz	r0, 8001558 <__swbuf_r+0x74>
 800151e:	68a3      	ldr	r3, [r4, #8]
 8001520:	3b01      	subs	r3, #1
 8001522:	60a3      	str	r3, [r4, #8]
 8001524:	6823      	ldr	r3, [r4, #0]
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	6022      	str	r2, [r4, #0]
 800152a:	701e      	strb	r6, [r3, #0]
 800152c:	6962      	ldr	r2, [r4, #20]
 800152e:	1c43      	adds	r3, r0, #1
 8001530:	429a      	cmp	r2, r3
 8001532:	d004      	beq.n	800153e <__swbuf_r+0x5a>
 8001534:	89a3      	ldrh	r3, [r4, #12]
 8001536:	07db      	lsls	r3, r3, #31
 8001538:	d506      	bpl.n	8001548 <__swbuf_r+0x64>
 800153a:	2e0a      	cmp	r6, #10
 800153c:	d104      	bne.n	8001548 <__swbuf_r+0x64>
 800153e:	4621      	mov	r1, r4
 8001540:	4628      	mov	r0, r5
 8001542:	f7ff ffa7 	bl	8001494 <_fflush_r>
 8001546:	b938      	cbnz	r0, 8001558 <__swbuf_r+0x74>
 8001548:	4638      	mov	r0, r7
 800154a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800154c:	4621      	mov	r1, r4
 800154e:	4628      	mov	r0, r5
 8001550:	f000 f806 	bl	8001560 <__swsetup_r>
 8001554:	2800      	cmp	r0, #0
 8001556:	d0d5      	beq.n	8001504 <__swbuf_r+0x20>
 8001558:	f04f 37ff 	mov.w	r7, #4294967295
 800155c:	e7f4      	b.n	8001548 <__swbuf_r+0x64>
	...

08001560 <__swsetup_r>:
 8001560:	b538      	push	{r3, r4, r5, lr}
 8001562:	4b2a      	ldr	r3, [pc, #168]	; (800160c <__swsetup_r+0xac>)
 8001564:	4605      	mov	r5, r0
 8001566:	6818      	ldr	r0, [r3, #0]
 8001568:	460c      	mov	r4, r1
 800156a:	b118      	cbz	r0, 8001574 <__swsetup_r+0x14>
 800156c:	6a03      	ldr	r3, [r0, #32]
 800156e:	b90b      	cbnz	r3, 8001574 <__swsetup_r+0x14>
 8001570:	f7ff fa36 	bl	80009e0 <__sinit>
 8001574:	89a3      	ldrh	r3, [r4, #12]
 8001576:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800157a:	0718      	lsls	r0, r3, #28
 800157c:	d422      	bmi.n	80015c4 <__swsetup_r+0x64>
 800157e:	06d9      	lsls	r1, r3, #27
 8001580:	d407      	bmi.n	8001592 <__swsetup_r+0x32>
 8001582:	2309      	movs	r3, #9
 8001584:	602b      	str	r3, [r5, #0]
 8001586:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800158a:	81a3      	strh	r3, [r4, #12]
 800158c:	f04f 30ff 	mov.w	r0, #4294967295
 8001590:	e034      	b.n	80015fc <__swsetup_r+0x9c>
 8001592:	0758      	lsls	r0, r3, #29
 8001594:	d512      	bpl.n	80015bc <__swsetup_r+0x5c>
 8001596:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8001598:	b141      	cbz	r1, 80015ac <__swsetup_r+0x4c>
 800159a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800159e:	4299      	cmp	r1, r3
 80015a0:	d002      	beq.n	80015a8 <__swsetup_r+0x48>
 80015a2:	4628      	mov	r0, r5
 80015a4:	f7ff fb24 	bl	8000bf0 <_free_r>
 80015a8:	2300      	movs	r3, #0
 80015aa:	6363      	str	r3, [r4, #52]	; 0x34
 80015ac:	89a3      	ldrh	r3, [r4, #12]
 80015ae:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80015b2:	81a3      	strh	r3, [r4, #12]
 80015b4:	2300      	movs	r3, #0
 80015b6:	6063      	str	r3, [r4, #4]
 80015b8:	6923      	ldr	r3, [r4, #16]
 80015ba:	6023      	str	r3, [r4, #0]
 80015bc:	89a3      	ldrh	r3, [r4, #12]
 80015be:	f043 0308 	orr.w	r3, r3, #8
 80015c2:	81a3      	strh	r3, [r4, #12]
 80015c4:	6923      	ldr	r3, [r4, #16]
 80015c6:	b94b      	cbnz	r3, 80015dc <__swsetup_r+0x7c>
 80015c8:	89a3      	ldrh	r3, [r4, #12]
 80015ca:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80015ce:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015d2:	d003      	beq.n	80015dc <__swsetup_r+0x7c>
 80015d4:	4621      	mov	r1, r4
 80015d6:	4628      	mov	r0, r5
 80015d8:	f000 f850 	bl	800167c <__smakebuf_r>
 80015dc:	89a0      	ldrh	r0, [r4, #12]
 80015de:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80015e2:	f010 0301 	ands.w	r3, r0, #1
 80015e6:	d00a      	beq.n	80015fe <__swsetup_r+0x9e>
 80015e8:	2300      	movs	r3, #0
 80015ea:	60a3      	str	r3, [r4, #8]
 80015ec:	6963      	ldr	r3, [r4, #20]
 80015ee:	425b      	negs	r3, r3
 80015f0:	61a3      	str	r3, [r4, #24]
 80015f2:	6923      	ldr	r3, [r4, #16]
 80015f4:	b943      	cbnz	r3, 8001608 <__swsetup_r+0xa8>
 80015f6:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80015fa:	d1c4      	bne.n	8001586 <__swsetup_r+0x26>
 80015fc:	bd38      	pop	{r3, r4, r5, pc}
 80015fe:	0781      	lsls	r1, r0, #30
 8001600:	bf58      	it	pl
 8001602:	6963      	ldrpl	r3, [r4, #20]
 8001604:	60a3      	str	r3, [r4, #8]
 8001606:	e7f4      	b.n	80015f2 <__swsetup_r+0x92>
 8001608:	2000      	movs	r0, #0
 800160a:	e7f7      	b.n	80015fc <__swsetup_r+0x9c>
 800160c:	20000058 	.word	0x20000058

08001610 <_sbrk_r>:
 8001610:	b538      	push	{r3, r4, r5, lr}
 8001612:	4d06      	ldr	r5, [pc, #24]	; (800162c <_sbrk_r+0x1c>)
 8001614:	2300      	movs	r3, #0
 8001616:	4604      	mov	r4, r0
 8001618:	4608      	mov	r0, r1
 800161a:	602b      	str	r3, [r5, #0]
 800161c:	f7ff f882 	bl	8000724 <_sbrk>
 8001620:	1c43      	adds	r3, r0, #1
 8001622:	d102      	bne.n	800162a <_sbrk_r+0x1a>
 8001624:	682b      	ldr	r3, [r5, #0]
 8001626:	b103      	cbz	r3, 800162a <_sbrk_r+0x1a>
 8001628:	6023      	str	r3, [r4, #0]
 800162a:	bd38      	pop	{r3, r4, r5, pc}
 800162c:	20000694 	.word	0x20000694

08001630 <__swhatbuf_r>:
 8001630:	b570      	push	{r4, r5, r6, lr}
 8001632:	460c      	mov	r4, r1
 8001634:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8001638:	2900      	cmp	r1, #0
 800163a:	b096      	sub	sp, #88	; 0x58
 800163c:	4615      	mov	r5, r2
 800163e:	461e      	mov	r6, r3
 8001640:	da0d      	bge.n	800165e <__swhatbuf_r+0x2e>
 8001642:	89a3      	ldrh	r3, [r4, #12]
 8001644:	f013 0f80 	tst.w	r3, #128	; 0x80
 8001648:	f04f 0100 	mov.w	r1, #0
 800164c:	bf0c      	ite	eq
 800164e:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8001652:	2340      	movne	r3, #64	; 0x40
 8001654:	2000      	movs	r0, #0
 8001656:	6031      	str	r1, [r6, #0]
 8001658:	602b      	str	r3, [r5, #0]
 800165a:	b016      	add	sp, #88	; 0x58
 800165c:	bd70      	pop	{r4, r5, r6, pc}
 800165e:	466a      	mov	r2, sp
 8001660:	f000 f848 	bl	80016f4 <_fstat_r>
 8001664:	2800      	cmp	r0, #0
 8001666:	dbec      	blt.n	8001642 <__swhatbuf_r+0x12>
 8001668:	9901      	ldr	r1, [sp, #4]
 800166a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800166e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8001672:	4259      	negs	r1, r3
 8001674:	4159      	adcs	r1, r3
 8001676:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800167a:	e7eb      	b.n	8001654 <__swhatbuf_r+0x24>

0800167c <__smakebuf_r>:
 800167c:	898b      	ldrh	r3, [r1, #12]
 800167e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8001680:	079d      	lsls	r5, r3, #30
 8001682:	4606      	mov	r6, r0
 8001684:	460c      	mov	r4, r1
 8001686:	d507      	bpl.n	8001698 <__smakebuf_r+0x1c>
 8001688:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800168c:	6023      	str	r3, [r4, #0]
 800168e:	6123      	str	r3, [r4, #16]
 8001690:	2301      	movs	r3, #1
 8001692:	6163      	str	r3, [r4, #20]
 8001694:	b002      	add	sp, #8
 8001696:	bd70      	pop	{r4, r5, r6, pc}
 8001698:	ab01      	add	r3, sp, #4
 800169a:	466a      	mov	r2, sp
 800169c:	f7ff ffc8 	bl	8001630 <__swhatbuf_r>
 80016a0:	9900      	ldr	r1, [sp, #0]
 80016a2:	4605      	mov	r5, r0
 80016a4:	4630      	mov	r0, r6
 80016a6:	f7ff fb0f 	bl	8000cc8 <_malloc_r>
 80016aa:	b948      	cbnz	r0, 80016c0 <__smakebuf_r+0x44>
 80016ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80016b0:	059a      	lsls	r2, r3, #22
 80016b2:	d4ef      	bmi.n	8001694 <__smakebuf_r+0x18>
 80016b4:	f023 0303 	bic.w	r3, r3, #3
 80016b8:	f043 0302 	orr.w	r3, r3, #2
 80016bc:	81a3      	strh	r3, [r4, #12]
 80016be:	e7e3      	b.n	8001688 <__smakebuf_r+0xc>
 80016c0:	89a3      	ldrh	r3, [r4, #12]
 80016c2:	6020      	str	r0, [r4, #0]
 80016c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016c8:	81a3      	strh	r3, [r4, #12]
 80016ca:	9b00      	ldr	r3, [sp, #0]
 80016cc:	6163      	str	r3, [r4, #20]
 80016ce:	9b01      	ldr	r3, [sp, #4]
 80016d0:	6120      	str	r0, [r4, #16]
 80016d2:	b15b      	cbz	r3, 80016ec <__smakebuf_r+0x70>
 80016d4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80016d8:	4630      	mov	r0, r6
 80016da:	f000 f81d 	bl	8001718 <_isatty_r>
 80016de:	b128      	cbz	r0, 80016ec <__smakebuf_r+0x70>
 80016e0:	89a3      	ldrh	r3, [r4, #12]
 80016e2:	f023 0303 	bic.w	r3, r3, #3
 80016e6:	f043 0301 	orr.w	r3, r3, #1
 80016ea:	81a3      	strh	r3, [r4, #12]
 80016ec:	89a3      	ldrh	r3, [r4, #12]
 80016ee:	431d      	orrs	r5, r3
 80016f0:	81a5      	strh	r5, [r4, #12]
 80016f2:	e7cf      	b.n	8001694 <__smakebuf_r+0x18>

080016f4 <_fstat_r>:
 80016f4:	b538      	push	{r3, r4, r5, lr}
 80016f6:	4d07      	ldr	r5, [pc, #28]	; (8001714 <_fstat_r+0x20>)
 80016f8:	2300      	movs	r3, #0
 80016fa:	4604      	mov	r4, r0
 80016fc:	4608      	mov	r0, r1
 80016fe:	4611      	mov	r1, r2
 8001700:	602b      	str	r3, [r5, #0]
 8001702:	f7fe ffe6 	bl	80006d2 <_fstat>
 8001706:	1c43      	adds	r3, r0, #1
 8001708:	d102      	bne.n	8001710 <_fstat_r+0x1c>
 800170a:	682b      	ldr	r3, [r5, #0]
 800170c:	b103      	cbz	r3, 8001710 <_fstat_r+0x1c>
 800170e:	6023      	str	r3, [r4, #0]
 8001710:	bd38      	pop	{r3, r4, r5, pc}
 8001712:	bf00      	nop
 8001714:	20000694 	.word	0x20000694

08001718 <_isatty_r>:
 8001718:	b538      	push	{r3, r4, r5, lr}
 800171a:	4d06      	ldr	r5, [pc, #24]	; (8001734 <_isatty_r+0x1c>)
 800171c:	2300      	movs	r3, #0
 800171e:	4604      	mov	r4, r0
 8001720:	4608      	mov	r0, r1
 8001722:	602b      	str	r3, [r5, #0]
 8001724:	f7fe ffe5 	bl	80006f2 <_isatty>
 8001728:	1c43      	adds	r3, r0, #1
 800172a:	d102      	bne.n	8001732 <_isatty_r+0x1a>
 800172c:	682b      	ldr	r3, [r5, #0]
 800172e:	b103      	cbz	r3, 8001732 <_isatty_r+0x1a>
 8001730:	6023      	str	r3, [r4, #0]
 8001732:	bd38      	pop	{r3, r4, r5, pc}
 8001734:	20000694 	.word	0x20000694

08001738 <_init>:
 8001738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800173a:	bf00      	nop
 800173c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800173e:	bc08      	pop	{r3}
 8001740:	469e      	mov	lr, r3
 8001742:	4770      	bx	lr

08001744 <_fini>:
 8001744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8001746:	bf00      	nop
 8001748:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800174a:	bc08      	pop	{r3}
 800174c:	469e      	mov	lr, r3
 800174e:	4770      	bx	lr
